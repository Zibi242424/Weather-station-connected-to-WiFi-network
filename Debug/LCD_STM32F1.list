
C:\Users\manse\OneDrive\Dokumenty\Atollic_Workspace\LCD_STM32F1\Debug\LCD_STM32F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003484  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027d0  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000048  20000000  08005d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000244  20000048  08005db0  00020048  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000028c  08005db0  0002028c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a738  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001de1  00000000  00000000  0002a7a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000be8  00000000  00000000  0002c590  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab0  00000000  00000000  0002d178  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000426a  00000000  00000000  0002dc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000035a0  00000000  00000000  00031e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00035432  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000033dc  00000000  00000000  000354b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003888c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08003578 	.word	0x08003578

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08003578 	.word	0x08003578

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__aeabi_d2f>:
 80008e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008e8:	bf24      	itt	cs
 80008ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f2:	d90d      	bls.n	8000910 <__aeabi_d2f+0x30>
 80008f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000904:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000908:	bf08      	it	eq
 800090a:	f020 0001 	biceq.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000914:	d121      	bne.n	800095a <__aeabi_d2f+0x7a>
 8000916:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091a:	bfbc      	itt	lt
 800091c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000920:	4770      	bxlt	lr
 8000922:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000926:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092a:	f1c2 0218 	rsb	r2, r2, #24
 800092e:	f1c2 0c20 	rsb	ip, r2, #32
 8000932:	fa10 f30c 	lsls.w	r3, r0, ip
 8000936:	fa20 f002 	lsr.w	r0, r0, r2
 800093a:	bf18      	it	ne
 800093c:	f040 0001 	orrne.w	r0, r0, #1
 8000940:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000944:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000948:	fa03 fc0c 	lsl.w	ip, r3, ip
 800094c:	ea40 000c 	orr.w	r0, r0, ip
 8000950:	fa23 f302 	lsr.w	r3, r3, r2
 8000954:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000958:	e7cc      	b.n	80008f4 <__aeabi_d2f+0x14>
 800095a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800095e:	d107      	bne.n	8000970 <__aeabi_d2f+0x90>
 8000960:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000964:	bf1e      	ittt	ne
 8000966:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800096e:	4770      	bxne	lr
 8000970:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000974:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_frsub>:
 8000980:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000984:	e002      	b.n	800098c <__addsf3>
 8000986:	bf00      	nop

08000988 <__aeabi_fsub>:
 8000988:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800098c <__addsf3>:
 800098c:	0042      	lsls	r2, r0, #1
 800098e:	bf1f      	itttt	ne
 8000990:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000994:	ea92 0f03 	teqne	r2, r3
 8000998:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800099c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a0:	d06a      	beq.n	8000a78 <__addsf3+0xec>
 80009a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009aa:	bfc1      	itttt	gt
 80009ac:	18d2      	addgt	r2, r2, r3
 80009ae:	4041      	eorgt	r1, r0
 80009b0:	4048      	eorgt	r0, r1
 80009b2:	4041      	eorgt	r1, r0
 80009b4:	bfb8      	it	lt
 80009b6:	425b      	neglt	r3, r3
 80009b8:	2b19      	cmp	r3, #25
 80009ba:	bf88      	it	hi
 80009bc:	4770      	bxhi	lr
 80009be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009da:	bf18      	it	ne
 80009dc:	4249      	negne	r1, r1
 80009de:	ea92 0f03 	teq	r2, r3
 80009e2:	d03f      	beq.n	8000a64 <__addsf3+0xd8>
 80009e4:	f1a2 0201 	sub.w	r2, r2, #1
 80009e8:	fa41 fc03 	asr.w	ip, r1, r3
 80009ec:	eb10 000c 	adds.w	r0, r0, ip
 80009f0:	f1c3 0320 	rsb	r3, r3, #32
 80009f4:	fa01 f103 	lsl.w	r1, r1, r3
 80009f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009fc:	d502      	bpl.n	8000a04 <__addsf3+0x78>
 80009fe:	4249      	negs	r1, r1
 8000a00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a08:	d313      	bcc.n	8000a32 <__addsf3+0xa6>
 8000a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a0e:	d306      	bcc.n	8000a1e <__addsf3+0x92>
 8000a10:	0840      	lsrs	r0, r0, #1
 8000a12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a16:	f102 0201 	add.w	r2, r2, #1
 8000a1a:	2afe      	cmp	r2, #254	; 0xfe
 8000a1c:	d251      	bcs.n	8000ac2 <__addsf3+0x136>
 8000a1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a26:	bf08      	it	eq
 8000a28:	f020 0001 	biceq.w	r0, r0, #1
 8000a2c:	ea40 0003 	orr.w	r0, r0, r3
 8000a30:	4770      	bx	lr
 8000a32:	0049      	lsls	r1, r1, #1
 8000a34:	eb40 0000 	adc.w	r0, r0, r0
 8000a38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a40:	d1ed      	bne.n	8000a1e <__addsf3+0x92>
 8000a42:	fab0 fc80 	clz	ip, r0
 8000a46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a52:	bfaa      	itet	ge
 8000a54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a58:	4252      	neglt	r2, r2
 8000a5a:	4318      	orrge	r0, r3
 8000a5c:	bfbc      	itt	lt
 8000a5e:	40d0      	lsrlt	r0, r2
 8000a60:	4318      	orrlt	r0, r3
 8000a62:	4770      	bx	lr
 8000a64:	f092 0f00 	teq	r2, #0
 8000a68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a6c:	bf06      	itte	eq
 8000a6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a72:	3201      	addeq	r2, #1
 8000a74:	3b01      	subne	r3, #1
 8000a76:	e7b5      	b.n	80009e4 <__addsf3+0x58>
 8000a78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a86:	d021      	beq.n	8000acc <__addsf3+0x140>
 8000a88:	ea92 0f03 	teq	r2, r3
 8000a8c:	d004      	beq.n	8000a98 <__addsf3+0x10c>
 8000a8e:	f092 0f00 	teq	r2, #0
 8000a92:	bf08      	it	eq
 8000a94:	4608      	moveq	r0, r1
 8000a96:	4770      	bx	lr
 8000a98:	ea90 0f01 	teq	r0, r1
 8000a9c:	bf1c      	itt	ne
 8000a9e:	2000      	movne	r0, #0
 8000aa0:	4770      	bxne	lr
 8000aa2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aa6:	d104      	bne.n	8000ab2 <__addsf3+0x126>
 8000aa8:	0040      	lsls	r0, r0, #1
 8000aaa:	bf28      	it	cs
 8000aac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	4770      	bx	lr
 8000ab2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ab6:	bf3c      	itt	cc
 8000ab8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000abc:	4770      	bxcc	lr
 8000abe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aca:	4770      	bx	lr
 8000acc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad0:	bf16      	itet	ne
 8000ad2:	4608      	movne	r0, r1
 8000ad4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ad8:	4601      	movne	r1, r0
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	bf06      	itte	eq
 8000ade:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ae2:	ea90 0f01 	teqeq	r0, r1
 8000ae6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aea:	4770      	bx	lr

08000aec <__aeabi_ui2f>:
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	e004      	b.n	8000afc <__aeabi_i2f+0x8>
 8000af2:	bf00      	nop

08000af4 <__aeabi_i2f>:
 8000af4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000af8:	bf48      	it	mi
 8000afa:	4240      	negmi	r0, r0
 8000afc:	ea5f 0c00 	movs.w	ip, r0
 8000b00:	bf08      	it	eq
 8000b02:	4770      	bxeq	lr
 8000b04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b08:	4601      	mov	r1, r0
 8000b0a:	f04f 0000 	mov.w	r0, #0
 8000b0e:	e01c      	b.n	8000b4a <__aeabi_l2f+0x2a>

08000b10 <__aeabi_ul2f>:
 8000b10:	ea50 0201 	orrs.w	r2, r0, r1
 8000b14:	bf08      	it	eq
 8000b16:	4770      	bxeq	lr
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e00a      	b.n	8000b34 <__aeabi_l2f+0x14>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_l2f>:
 8000b20:	ea50 0201 	orrs.w	r2, r0, r1
 8000b24:	bf08      	it	eq
 8000b26:	4770      	bxeq	lr
 8000b28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	d502      	bpl.n	8000b34 <__aeabi_l2f+0x14>
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	ea5f 0c01 	movs.w	ip, r1
 8000b38:	bf02      	ittt	eq
 8000b3a:	4684      	moveq	ip, r0
 8000b3c:	4601      	moveq	r1, r0
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b44:	bf08      	it	eq
 8000b46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b4e:	fabc f28c 	clz	r2, ip
 8000b52:	3a08      	subs	r2, #8
 8000b54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b58:	db10      	blt.n	8000b7c <__aeabi_l2f+0x5c>
 8000b5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b5e:	4463      	add	r3, ip
 8000b60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b64:	f1c2 0220 	rsb	r2, r2, #32
 8000b68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b70:	eb43 0002 	adc.w	r0, r3, r2
 8000b74:	bf08      	it	eq
 8000b76:	f020 0001 	biceq.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	f102 0220 	add.w	r2, r2, #32
 8000b80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b84:	f1c2 0220 	rsb	r2, r2, #32
 8000b88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b90:	eb43 0002 	adc.w	r0, r3, r2
 8000b94:	bf08      	it	eq
 8000b96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_fmul>:
 8000b9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000baa:	ea92 0f0c 	teqne	r2, ip
 8000bae:	ea93 0f0c 	teqne	r3, ip
 8000bb2:	d06f      	beq.n	8000c94 <__aeabi_fmul+0xf8>
 8000bb4:	441a      	add	r2, r3
 8000bb6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bba:	0240      	lsls	r0, r0, #9
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bc2:	d01e      	beq.n	8000c02 <__aeabi_fmul+0x66>
 8000bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bcc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd0:	fba0 3101 	umull	r3, r1, r0, r1
 8000bd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bdc:	bf3e      	ittt	cc
 8000bde:	0049      	lslcc	r1, r1, #1
 8000be0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000be4:	005b      	lslcc	r3, r3, #1
 8000be6:	ea40 0001 	orr.w	r0, r0, r1
 8000bea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bee:	2afd      	cmp	r2, #253	; 0xfd
 8000bf0:	d81d      	bhi.n	8000c2e <__aeabi_fmul+0x92>
 8000bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfa:	bf08      	it	eq
 8000bfc:	f020 0001 	biceq.w	r0, r0, #1
 8000c00:	4770      	bx	lr
 8000c02:	f090 0f00 	teq	r0, #0
 8000c06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c0a:	bf08      	it	eq
 8000c0c:	0249      	lsleq	r1, r1, #9
 8000c0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c16:	3a7f      	subs	r2, #127	; 0x7f
 8000c18:	bfc2      	ittt	gt
 8000c1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c22:	4770      	bxgt	lr
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	dc5d      	bgt.n	8000cec <__aeabi_fmul+0x150>
 8000c30:	f112 0f19 	cmn.w	r2, #25
 8000c34:	bfdc      	itt	le
 8000c36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c3a:	4770      	bxle	lr
 8000c3c:	f1c2 0200 	rsb	r2, r2, #0
 8000c40:	0041      	lsls	r1, r0, #1
 8000c42:	fa21 f102 	lsr.w	r1, r1, r2
 8000c46:	f1c2 0220 	rsb	r2, r2, #32
 8000c4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c52:	f140 0000 	adc.w	r0, r0, #0
 8000c56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c5a:	bf08      	it	eq
 8000c5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c60:	4770      	bx	lr
 8000c62:	f092 0f00 	teq	r2, #0
 8000c66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c6a:	bf02      	ittt	eq
 8000c6c:	0040      	lsleq	r0, r0, #1
 8000c6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c72:	3a01      	subeq	r2, #1
 8000c74:	d0f9      	beq.n	8000c6a <__aeabi_fmul+0xce>
 8000c76:	ea40 000c 	orr.w	r0, r0, ip
 8000c7a:	f093 0f00 	teq	r3, #0
 8000c7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c82:	bf02      	ittt	eq
 8000c84:	0049      	lsleq	r1, r1, #1
 8000c86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c8a:	3b01      	subeq	r3, #1
 8000c8c:	d0f9      	beq.n	8000c82 <__aeabi_fmul+0xe6>
 8000c8e:	ea41 010c 	orr.w	r1, r1, ip
 8000c92:	e78f      	b.n	8000bb4 <__aeabi_fmul+0x18>
 8000c94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c98:	ea92 0f0c 	teq	r2, ip
 8000c9c:	bf18      	it	ne
 8000c9e:	ea93 0f0c 	teqne	r3, ip
 8000ca2:	d00a      	beq.n	8000cba <__aeabi_fmul+0x11e>
 8000ca4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ca8:	bf18      	it	ne
 8000caa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cae:	d1d8      	bne.n	8000c62 <__aeabi_fmul+0xc6>
 8000cb0:	ea80 0001 	eor.w	r0, r0, r1
 8000cb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f090 0f00 	teq	r0, #0
 8000cbe:	bf17      	itett	ne
 8000cc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cc4:	4608      	moveq	r0, r1
 8000cc6:	f091 0f00 	teqne	r1, #0
 8000cca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cce:	d014      	beq.n	8000cfa <__aeabi_fmul+0x15e>
 8000cd0:	ea92 0f0c 	teq	r2, ip
 8000cd4:	d101      	bne.n	8000cda <__aeabi_fmul+0x13e>
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	d10f      	bne.n	8000cfa <__aeabi_fmul+0x15e>
 8000cda:	ea93 0f0c 	teq	r3, ip
 8000cde:	d103      	bne.n	8000ce8 <__aeabi_fmul+0x14c>
 8000ce0:	024b      	lsls	r3, r1, #9
 8000ce2:	bf18      	it	ne
 8000ce4:	4608      	movne	r0, r1
 8000ce6:	d108      	bne.n	8000cfa <__aeabi_fmul+0x15e>
 8000ce8:	ea80 0001 	eor.w	r0, r0, r1
 8000cec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf8:	4770      	bx	lr
 8000cfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_fdiv>:
 8000d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d12:	ea92 0f0c 	teqne	r2, ip
 8000d16:	ea93 0f0c 	teqne	r3, ip
 8000d1a:	d069      	beq.n	8000df0 <__aeabi_fdiv+0xec>
 8000d1c:	eba2 0203 	sub.w	r2, r2, r3
 8000d20:	ea80 0c01 	eor.w	ip, r0, r1
 8000d24:	0249      	lsls	r1, r1, #9
 8000d26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d2a:	d037      	beq.n	8000d9c <__aeabi_fdiv+0x98>
 8000d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d3c:	428b      	cmp	r3, r1
 8000d3e:	bf38      	it	cc
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	bf24      	itt	cs
 8000d4e:	1a5b      	subcs	r3, r3, r1
 8000d50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d58:	bf24      	itt	cs
 8000d5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d66:	bf24      	itt	cs
 8000d68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	bf18      	it	ne
 8000d82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d86:	d1e0      	bne.n	8000d4a <__aeabi_fdiv+0x46>
 8000d88:	2afd      	cmp	r2, #253	; 0xfd
 8000d8a:	f63f af50 	bhi.w	8000c2e <__aeabi_fmul+0x92>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da4:	327f      	adds	r2, #127	; 0x7f
 8000da6:	bfc2      	ittt	gt
 8000da8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db0:	4770      	bxgt	lr
 8000db2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db6:	f04f 0300 	mov.w	r3, #0
 8000dba:	3a01      	subs	r2, #1
 8000dbc:	e737      	b.n	8000c2e <__aeabi_fmul+0x92>
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fdiv+0xc2>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fdiv+0xda>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e795      	b.n	8000d1c <__aeabi_fdiv+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	d108      	bne.n	8000e0c <__aeabi_fdiv+0x108>
 8000dfa:	0242      	lsls	r2, r0, #9
 8000dfc:	f47f af7d 	bne.w	8000cfa <__aeabi_fmul+0x15e>
 8000e00:	ea93 0f0c 	teq	r3, ip
 8000e04:	f47f af70 	bne.w	8000ce8 <__aeabi_fmul+0x14c>
 8000e08:	4608      	mov	r0, r1
 8000e0a:	e776      	b.n	8000cfa <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	d104      	bne.n	8000e1c <__aeabi_fdiv+0x118>
 8000e12:	024b      	lsls	r3, r1, #9
 8000e14:	f43f af4c 	beq.w	8000cb0 <__aeabi_fmul+0x114>
 8000e18:	4608      	mov	r0, r1
 8000e1a:	e76e      	b.n	8000cfa <__aeabi_fmul+0x15e>
 8000e1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e20:	bf18      	it	ne
 8000e22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	d1ca      	bne.n	8000dbe <__aeabi_fdiv+0xba>
 8000e28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e2c:	f47f af5c 	bne.w	8000ce8 <__aeabi_fmul+0x14c>
 8000e30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	f47f af3c 	bne.w	8000cb0 <__aeabi_fmul+0x114>
 8000e38:	e75f      	b.n	8000cfa <__aeabi_fmul+0x15e>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_f2iz>:
 8000e3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e44:	d30f      	bcc.n	8000e66 <__aeabi_f2iz+0x2a>
 8000e46:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e4e:	d90d      	bls.n	8000e6c <__aeabi_f2iz+0x30>
 8000e50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e58:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e60:	bf18      	it	ne
 8000e62:	4240      	negne	r0, r0
 8000e64:	4770      	bx	lr
 8000e66:	f04f 0000 	mov.w	r0, #0
 8000e6a:	4770      	bx	lr
 8000e6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e70:	d101      	bne.n	8000e76 <__aeabi_f2iz+0x3a>
 8000e72:	0242      	lsls	r2, r0, #9
 8000e74:	d105      	bne.n	8000e82 <__aeabi_f2iz+0x46>
 8000e76:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e7a:	bf08      	it	eq
 8000e7c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr

08000e88 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eaa:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	791b      	ldrb	r3, [r3, #4]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <ADC_Init+0xa0>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000efc:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	7c1b      	ldrb	r3, [r3, #16]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	7afb      	ldrb	r3, [r7, #11]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	051b      	lsls	r3, r3, #20
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	fff1f7fd 	.word	0xfff1f7fd

08000f2c <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	741a      	strb	r2, [r3, #16]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f043 0201 	orr.w	r2, r3, #1
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8000f80:	e005      	b.n	8000f8e <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f023 0201 	bic.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f043 0208 	orr.w	r2, r3, #8
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	609a      	str	r2, [r3, #8]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e001      	b.n	8000fd8 <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f043 0204 	orr.w	r2, r3, #4
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e001      	b.n	8001024 <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 800104e:	e005      	b.n	800105c <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8001066:	b480      	push	{r7}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	4608      	mov	r0, r1
 8001070:	4611      	mov	r1, r2
 8001072:	461a      	mov	r2, r3
 8001074:	4603      	mov	r3, r0
 8001076:	70fb      	strb	r3, [r7, #3]
 8001078:	460b      	mov	r3, r1
 800107a:	70bb      	strb	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	2b09      	cmp	r3, #9
 800108c:	d923      	bls.n	80010d6 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	f1a3 020a 	sub.w	r2, r3, #10
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	2207      	movs	r2, #7
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4013      	ands	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80010b2:	7879      	ldrb	r1, [r7, #1]
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	f1a3 020a 	sub.w	r2, r3, #10
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	e01e      	b.n	8001114 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	2207      	movs	r2, #7
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4013      	ands	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80010f6:	7879      	ldrb	r1, [r7, #1]
 80010f8:	78fa      	ldrb	r2, [r7, #3]
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001114:	78bb      	ldrb	r3, [r7, #2]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d821      	bhi.n	800115e <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8001120:	78bb      	ldrb	r3, [r7, #2]
 8001122:	1e5a      	subs	r2, r3, #1
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	221f      	movs	r2, #31
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	43db      	mvns	r3, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800113c:	78f9      	ldrb	r1, [r7, #3]
 800113e:	78bb      	ldrb	r3, [r7, #2]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800115c:	e047      	b.n	80011ee <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800115e:	78bb      	ldrb	r3, [r7, #2]
 8001160:	2b0c      	cmp	r3, #12
 8001162:	d821      	bhi.n	80011a8 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800116a:	78bb      	ldrb	r3, [r7, #2]
 800116c:	1fda      	subs	r2, r3, #7
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	221f      	movs	r2, #31
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	43db      	mvns	r3, r3
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8001186:	78f9      	ldrb	r1, [r7, #3]
 8001188:	78bb      	ldrb	r3, [r7, #2]
 800118a:	1fda      	subs	r2, r3, #7
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4313      	orrs	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80011a6:	e022      	b.n	80011ee <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80011ae:	78bb      	ldrb	r3, [r7, #2]
 80011b0:	f1a3 020d 	sub.w	r2, r3, #13
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	221f      	movs	r2, #31
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80011cc:	78f9      	ldrb	r1, [r7, #3]
 80011ce:	78bb      	ldrb	r3, [r7, #2]
 80011d0:	f1a3 020d 	sub.w	r2, r3, #13
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8001208:	4a08      	ldr	r2, [pc, #32]	; (800122c <ADC_TempSensorVrefintCmd+0x34>)
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <ADC_TempSensorVrefintCmd+0x34>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001212:	6093      	str	r3, [r2, #8]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
  }
}
 8001214:	e005      	b.n	8001222 <ADC_TempSensorVrefintCmd+0x2a>
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <ADC_TempSensorVrefintCmd+0x34>)
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <ADC_TempSensorVrefintCmd+0x34>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001220:	6093      	str	r3, [r2, #8]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	40012400 	.word	0x40012400

08001230 <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  RCC_BackupResetCmd(ENABLE);
 8001234:	2001      	movs	r0, #1
 8001236:	f000 fa93 	bl	8001760 <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
 800123a:	2000      	movs	r0, #0
 800123c:	f000 fa90 	bl	8001760 <RCC_BackupResetCmd>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	78db      	ldrb	r3, [r3, #3]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	789b      	ldrb	r3, [r3, #2]
 8001280:	461a      	mov	r2, r3
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	4313      	orrs	r3, r2
 8001286:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d044      	beq.n	800131c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e038      	b.n	8001310 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800129e:	2201      	movs	r2, #1
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d126      	bne.n	800130a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80012c2:	220f      	movs	r2, #15
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	4013      	ands	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	78db      	ldrb	r3, [r3, #3]
 80012e8:	2b28      	cmp	r3, #40	; 0x28
 80012ea:	d105      	bne.n	80012f8 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80012ec:	2201      	movs	r2, #1
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	409a      	lsls	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	e008      	b.n	800130a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	78db      	ldrb	r3, [r3, #3]
 80012fc:	2b48      	cmp	r3, #72	; 0x48
 80012fe:	d104      	bne.n	800130a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001300:	2201      	movs	r2, #1
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	409a      	lsls	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	3301      	adds	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b07      	cmp	r3, #7
 8001314:	d9c3      	bls.n	800129e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2bff      	cmp	r3, #255	; 0xff
 8001322:	d946      	bls.n	80013b2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	e03a      	b.n	80013a6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	3308      	adds	r3, #8
 8001334:	2201      	movs	r2, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d127      	bne.n	80013a0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001356:	220f      	movs	r2, #15
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	43db      	mvns	r3, r3
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	4013      	ands	r3, r2
 8001368:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4313      	orrs	r3, r2
 8001376:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	78db      	ldrb	r3, [r3, #3]
 800137c:	2b28      	cmp	r3, #40	; 0x28
 800137e:	d105      	bne.n	800138c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	3308      	adds	r3, #8
 8001384:	2201      	movs	r2, #1
 8001386:	409a      	lsls	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	78db      	ldrb	r3, [r3, #3]
 8001390:	2b48      	cmp	r3, #72	; 0x48
 8001392:	d105      	bne.n	80013a0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	3308      	adds	r3, #8
 8001398:	2201      	movs	r2, #1
 800139a:	409a      	lsls	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	d9c1      	bls.n	8001330 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	605a      	str	r2, [r3, #4]
  }
}
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ca:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2204      	movs	r2, #4
 80013d6:	70da      	strb	r2, [r3, #3]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	615a      	str	r2, [r3, #20]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
	...

0800141c <IWDG_WriteAccessCmd>:
  *     @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *     @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <IWDG_WriteAccessCmd+0x1c>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40003000 	.word	0x40003000

0800143c <IWDG_SetPrescaler>:
  *     @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *     @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <IWDG_SetPrescaler+0x1c>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	6053      	str	r3, [r2, #4]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40003000 	.word	0x40003000

0800145c <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *   This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <IWDG_SetReload+0x1c>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	6093      	str	r3, [r2, #8]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40003000 	.word	0x40003000

0800147c <IWDG_ReloadCounter>:
  *   (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_Reload;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <IWDG_ReloadCounter+0x14>)
 8001482:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40003000 	.word	0x40003000

08001494 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_Enable;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <IWDG_Enable+0x14>)
 800149a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40003000 	.word	0x40003000

080014ac <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the RTC and backup registers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <PWR_BackupAccessCmd+0x1c>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	420e0020 	.word	0x420e0020

080014cc <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <RCC_ADCCLKConfig+0x34>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014e4:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <RCC_ADCCLKConfig+0x34>)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6053      	str	r3, [r2, #4]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <RCC_LSEConfig+0x3c>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <RCC_LSEConfig+0x3c>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d002      	beq.n	8001526 <RCC_LSEConfig+0x22>
 8001520:	2b04      	cmp	r3, #4
 8001522:	d004      	beq.n	800152e <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8001524:	e007      	b.n	8001536 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <RCC_LSEConfig+0x3c>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
      break;
 800152c:	e003      	b.n	8001536 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <RCC_LSEConfig+0x3c>)
 8001530:	2205      	movs	r2, #5
 8001532:	701a      	strb	r2, [r3, #0]
      break;            
 8001534:	bf00      	nop
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40021020 	.word	0x40021020

08001544 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800154c:	4905      	ldr	r1, [pc, #20]	; (8001564 <RCC_RTCCLKConfig+0x20>)
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <RCC_RTCCLKConfig+0x20>)
 8001550:	6a1a      	ldr	r2, [r3, #32]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4313      	orrs	r3, r2
 8001556:	620b      	str	r3, [r1, #32]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <RCC_RTCCLKCmd+0x1c>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	4242043c 	.word	0x4242043c

08001588 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80015a0:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <RCC_GetClocksFreq+0x14c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 030c 	and.w	r3, r3, #12
 80015a8:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d007      	beq.n	80015c0 <RCC_GetClocksFreq+0x38>
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d009      	beq.n	80015c8 <RCC_GetClocksFreq+0x40>
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d133      	bne.n	8001620 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a47      	ldr	r2, [pc, #284]	; (80016d8 <RCC_GetClocksFreq+0x150>)
 80015bc:	601a      	str	r2, [r3, #0]
      break;
 80015be:	e033      	b.n	8001628 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a45      	ldr	r2, [pc, #276]	; (80016d8 <RCC_GetClocksFreq+0x150>)
 80015c4:	601a      	str	r2, [r3, #0]
      break;
 80015c6:	e02f      	b.n	8001628 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <RCC_GetClocksFreq+0x14c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80015d0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80015d2:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <RCC_GetClocksFreq+0x14c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	0c9b      	lsrs	r3, r3, #18
 80015e0:	3302      	adds	r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4a3b      	ldr	r2, [pc, #236]	; (80016dc <RCC_GetClocksFreq+0x154>)
 80015ee:	fb02 f203 	mul.w	r2, r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80015f6:	e017      	b.n	8001628 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <RCC_GetClocksFreq+0x14c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4a35      	ldr	r2, [pc, #212]	; (80016dc <RCC_GetClocksFreq+0x154>)
 8001608:	fb02 f203 	mul.w	r2, r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]
      break;
 8001610:	e00a      	b.n	8001628 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4a30      	ldr	r2, [pc, #192]	; (80016d8 <RCC_GetClocksFreq+0x150>)
 8001616:	fb02 f203 	mul.w	r2, r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
      break;
 800161e:	e003      	b.n	8001628 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <RCC_GetClocksFreq+0x150>)
 8001624:	601a      	str	r2, [r3, #0]
      break;
 8001626:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <RCC_GetClocksFreq+0x14c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001630:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <RCC_GetClocksFreq+0x158>)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	40da      	lsrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <RCC_GetClocksFreq+0x14c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001658:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <RCC_GetClocksFreq+0x158>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	40da      	lsrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <RCC_GetClocksFreq+0x14c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001680:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	0adb      	lsrs	r3, r3, #11
 8001686:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001688:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <RCC_GetClocksFreq+0x158>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	4413      	add	r3, r2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	40da      	lsrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <RCC_GetClocksFreq+0x14c>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	0b9b      	lsrs	r3, r3, #14
 80016ae:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80016b0:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <RCC_GetClocksFreq+0x15c>)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	611a      	str	r2, [r3, #16]
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	007a1200 	.word	0x007a1200
 80016dc:	003d0900 	.word	0x003d0900
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000010 	.word	0x20000010

080016e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80016fa:	4909      	ldr	r1, [pc, #36]	; (8001720 <RCC_APB2PeriphClockCmd+0x38>)
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <RCC_APB2PeriphClockCmd+0x38>)
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4313      	orrs	r3, r2
 8001704:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001706:	e006      	b.n	8001716 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001708:	4905      	ldr	r1, [pc, #20]	; (8001720 <RCC_APB2PeriphClockCmd+0x38>)
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <RCC_APB2PeriphClockCmd+0x38>)
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	43db      	mvns	r3, r3
 8001712:	4013      	ands	r3, r2
 8001714:	618b      	str	r3, [r1, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000

08001724 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001736:	4909      	ldr	r1, [pc, #36]	; (800175c <RCC_APB1PeriphClockCmd+0x38>)
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <RCC_APB1PeriphClockCmd+0x38>)
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001742:	e006      	b.n	8001752 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001744:	4905      	ldr	r1, [pc, #20]	; (800175c <RCC_APB1PeriphClockCmd+0x38>)
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <RCC_APB1PeriphClockCmd+0x38>)
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	43db      	mvns	r3, r3
 800174e:	4013      	ands	r3, r2
 8001750:	61cb      	str	r3, [r1, #28]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000

08001760 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <RCC_BackupResetCmd+0x1c>)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	42420440 	.word	0x42420440

08001780 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d103      	bne.n	80017ac <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <RCC_GetFlagStatus+0x70>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e009      	b.n	80017c0 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d103      	bne.n	80017ba <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <RCC_GetFlagStatus+0x70>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e002      	b.n	80017c0 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <RCC_GetFlagStatus+0x70>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80017d8:	2301      	movs	r3, #1
 80017da:	74fb      	strb	r3, [r7, #19]
 80017dc:	e001      	b.n	80017e2 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80017e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	460a      	mov	r2, r1
 80017fe:	80fb      	strh	r3, [r7, #6]
 8001800:	4613      	mov	r3, r2
 8001802:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001804:	797b      	ldrb	r3, [r7, #5]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <RTC_ITConfig+0x28>
  {
    RTC->CRH |= RTC_IT;
 800180a:	490c      	ldr	r1, [pc, #48]	; (800183c <RTC_ITConfig+0x48>)
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <RTC_ITConfig+0x48>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29a      	uxth	r2, r3
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4313      	orrs	r3, r2
 8001816:	b29b      	uxth	r3, r3
 8001818:	800b      	strh	r3, [r1, #0]
  }
  else
  {
    RTC->CRH &= (uint16_t)~RTC_IT;
  }
}
 800181a:	e009      	b.n	8001830 <RTC_ITConfig+0x3c>
    RTC->CRH &= (uint16_t)~RTC_IT;
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <RTC_ITConfig+0x48>)
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <RTC_ITConfig+0x48>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b29a      	uxth	r2, r3
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	43db      	mvns	r3, r3
 8001828:	b29b      	uxth	r3, r3
 800182a:	4013      	ands	r3, r2
 800182c:	b29b      	uxth	r3, r3
 800182e:	800b      	strh	r3, [r1, #0]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40002800 	.word	0x40002800

08001840 <RTC_EnterConfigMode>:
  * @brief  Enters the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_EnterConfigMode(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* Set the CNF flag to enter in the Configuration Mode */
  RTC->CRL |= RTC_CRL_CNF;
 8001844:	4a05      	ldr	r2, [pc, #20]	; (800185c <RTC_EnterConfigMode+0x1c>)
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <RTC_EnterConfigMode+0x1c>)
 8001848:	889b      	ldrh	r3, [r3, #4]
 800184a:	b29b      	uxth	r3, r3
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	b29b      	uxth	r3, r3
 8001852:	8093      	strh	r3, [r2, #4]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40002800 	.word	0x40002800

08001860 <RTC_ExitConfigMode>:
  * @brief  Exits from the RTC configuration mode.
  * @param  None
  * @retval None
  */
void RTC_ExitConfigMode(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* Reset the CNF flag to exit from the Configuration Mode */
  RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <RTC_ExitConfigMode+0x1c>)
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <RTC_ExitConfigMode+0x1c>)
 8001868:	889b      	ldrh	r3, [r3, #4]
 800186a:	b29b      	uxth	r3, r3
 800186c:	f023 0310 	bic.w	r3, r3, #16
 8001870:	b29b      	uxth	r3, r3
 8001872:	8093      	strh	r3, [r2, #4]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40002800 	.word	0x40002800

08001880 <RTC_GetCounter>:
  * @brief  Gets the RTC counter value.
  * @param  None
  * @retval RTC counter value.
  */
uint32_t RTC_GetCounter(void)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
  uint16_t high1 = 0, high2 = 0, low = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	80fb      	strh	r3, [r7, #6]
 800188a:	2300      	movs	r3, #0
 800188c:	80bb      	strh	r3, [r7, #4]
 800188e:	2300      	movs	r3, #0
 8001890:	807b      	strh	r3, [r7, #2]

  high1 = RTC->CNTH;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <RTC_GetCounter+0x4c>)
 8001894:	8b1b      	ldrh	r3, [r3, #24]
 8001896:	80fb      	strh	r3, [r7, #6]
  low   = RTC->CNTL;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <RTC_GetCounter+0x4c>)
 800189a:	8b9b      	ldrh	r3, [r3, #28]
 800189c:	807b      	strh	r3, [r7, #2]
  high2 = RTC->CNTH;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <RTC_GetCounter+0x4c>)
 80018a0:	8b1b      	ldrh	r3, [r3, #24]
 80018a2:	80bb      	strh	r3, [r7, #4]

  if (high1 != high2)
 80018a4:	88fa      	ldrh	r2, [r7, #6]
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d006      	beq.n	80018ba <RTC_GetCounter+0x3a>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    return (((uint32_t) high2 << 16 ) | RTC->CNTL);
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	041b      	lsls	r3, r3, #16
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <RTC_GetCounter+0x4c>)
 80018b2:	8b92      	ldrh	r2, [r2, #28]
 80018b4:	b292      	uxth	r2, r2
 80018b6:	4313      	orrs	r3, r2
 80018b8:	e003      	b.n	80018c2 <RTC_GetCounter+0x42>
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    return (((uint32_t) high1 << 16 ) | low);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	4313      	orrs	r3, r2
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40002800 	.word	0x40002800

080018d0 <RTC_SetCounter>:
  * @brief  Sets the RTC counter value.
  * @param  CounterValue: RTC counter new value.
  * @retval None
  */
void RTC_SetCounter(uint32_t CounterValue)
{ 
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  RTC_EnterConfigMode();
 80018d8:	f7ff ffb2 	bl	8001840 <RTC_EnterConfigMode>
  /* Set RTC COUNTER MSB word */
  RTC->CNTH = CounterValue >> 16;
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <RTC_SetCounter+0x2c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	8313      	strh	r3, [r2, #24]
  /* Set RTC COUNTER LSB word */
  RTC->CNTL = (CounterValue & RTC_LSB_MASK);
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <RTC_SetCounter+0x2c>)
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	b292      	uxth	r2, r2
 80018ec:	839a      	strh	r2, [r3, #28]
  RTC_ExitConfigMode();
 80018ee:	f7ff ffb7 	bl	8001860 <RTC_ExitConfigMode>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40002800 	.word	0x40002800

08001900 <RTC_SetPrescaler>:
  * @brief  Sets the RTC prescaler value.
  * @param  PrescalerValue: RTC prescaler new value.
  * @retval None
  */
void RTC_SetPrescaler(uint32_t PrescalerValue)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_PRESCALER(PrescalerValue));
  
  RTC_EnterConfigMode();
 8001908:	f7ff ff9a 	bl	8001840 <RTC_EnterConfigMode>
  /* Set RTC PRESCALER MSB word */
  RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
 800190c:	4a08      	ldr	r2, [pc, #32]	; (8001930 <RTC_SetPrescaler+0x30>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0c1b      	lsrs	r3, r3, #16
 8001912:	b29b      	uxth	r3, r3
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	b29b      	uxth	r3, r3
 800191a:	8113      	strh	r3, [r2, #8]
  /* Set RTC PRESCALER LSB word */
  RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <RTC_SetPrescaler+0x30>)
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	b292      	uxth	r2, r2
 8001922:	819a      	strh	r2, [r3, #12]
  RTC_ExitConfigMode();
 8001924:	f7ff ff9c 	bl	8001860 <RTC_ExitConfigMode>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40002800 	.word	0x40002800

08001934 <RTC_WaitForLastTask>:
  * @note   This function must be called before any write to RTC registers.
  * @param  None
  * @retval None
  */
void RTC_WaitForLastTask(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* Loop until RTOFF flag is set */
  while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
 8001938:	bf00      	nop
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <RTC_WaitForLastTask+0x1c>)
 800193c:	889b      	ldrh	r3, [r3, #4]
 800193e:	b29b      	uxth	r3, r3
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f8      	beq.n	800193a <RTC_WaitForLastTask+0x6>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40002800 	.word	0x40002800

08001954 <RTC_WaitForSynchro>:
  *   or an APB clock stop.
  * @param  None
  * @retval None
  */
void RTC_WaitForSynchro(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* Clear RSF flag */
  RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
 8001958:	4a09      	ldr	r2, [pc, #36]	; (8001980 <RTC_WaitForSynchro+0x2c>)
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <RTC_WaitForSynchro+0x2c>)
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	b29b      	uxth	r3, r3
 8001960:	f023 0308 	bic.w	r3, r3, #8
 8001964:	b29b      	uxth	r3, r3
 8001966:	8093      	strh	r3, [r2, #4]
  /* Loop until RSF flag is set */
  while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
 8001968:	bf00      	nop
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <RTC_WaitForSynchro+0x2c>)
 800196c:	889b      	ldrh	r3, [r3, #4]
 800196e:	b29b      	uxth	r3, r3
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f8      	beq.n	800196a <RTC_WaitForSynchro+0x16>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40002800 	.word	0x40002800

08001984 <RTC_GetFlagStatus>:
  *     @arg RTC_FLAG_ALR: Alarm flag
  *     @arg RTC_FLAG_SEC: Second flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
  
  if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <RTC_GetFlagStatus+0x34>)
 8001994:	889b      	ldrh	r3, [r3, #4]
 8001996:	b29a      	uxth	r2, r3
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4013      	ands	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <RTC_GetFlagStatus+0x24>
  {
    bitstatus = SET;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e001      	b.n	80019ac <RTC_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	40002800 	.word	0x40002800

080019bc <RTC_ClearITPendingBit>:
  *     @arg RTC_IT_ALR: Alarm interrupt
  *     @arg RTC_IT_SEC: Second interrupt
  * @retval None
  */
void RTC_ClearITPendingBit(uint16_t RTC_IT)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RTC_IT(RTC_IT));  
  
  /* Clear the corresponding RTC pending bit */
  RTC->CRL &= (uint16_t)~RTC_IT;
 80019c6:	4907      	ldr	r1, [pc, #28]	; (80019e4 <RTC_ClearITPendingBit+0x28>)
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <RTC_ClearITPendingBit+0x28>)
 80019ca:	889b      	ldrh	r3, [r3, #4]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	808b      	strh	r3, [r1, #4]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40002800 	.word	0x40002800

080019e8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001a02:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	881a      	ldrh	r2, [r3, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	885b      	ldrh	r3, [r3, #2]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	89fa      	ldrh	r2, [r7, #14]
 8001a4a:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	8b9b      	ldrh	r3, [r3, #28]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	8a1a      	ldrh	r2, [r3, #16]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	821a      	strh	r2, [r3, #16]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	821a      	strh	r2, [r3, #16]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001ad8:	e007      	b.n	8001aea <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	801a      	strh	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	819a      	strh	r2, [r3, #12]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	899b      	ldrh	r3, [r3, #12]
 8001b1c:	b29b      	uxth	r3, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	891b      	ldrh	r3, [r3, #8]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	4013      	ands	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a2e      	ldr	r2, [pc, #184]	; (8001c30 <TIM_TimeBaseInit+0xd0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <TIM_TimeBaseInit+0x44>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a2d      	ldr	r2, [pc, #180]	; (8001c34 <TIM_TimeBaseInit+0xd4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00f      	beq.n	8001ba4 <TIM_TimeBaseInit+0x44>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8a:	d00b      	beq.n	8001ba4 <TIM_TimeBaseInit+0x44>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a2a      	ldr	r2, [pc, #168]	; (8001c38 <TIM_TimeBaseInit+0xd8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <TIM_TimeBaseInit+0x44>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <TIM_TimeBaseInit+0xdc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d003      	beq.n	8001ba4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a28      	ldr	r2, [pc, #160]	; (8001c40 <TIM_TimeBaseInit+0xe0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d108      	bne.n	8001bb6 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001ba4:	89fb      	ldrh	r3, [r7, #14]
 8001ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001baa:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	885a      	ldrh	r2, [r3, #2]
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <TIM_TimeBaseInit+0xe4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00c      	beq.n	8001bd8 <TIM_TimeBaseInit+0x78>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <TIM_TimeBaseInit+0xe8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d008      	beq.n	8001bd8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bcc:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	88da      	ldrh	r2, [r3, #6]
 8001bd2:	89fb      	ldrh	r3, [r7, #14]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	89fa      	ldrh	r2, [r7, #14]
 8001bdc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	889a      	ldrh	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	881a      	ldrh	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <TIM_TimeBaseInit+0xd0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00f      	beq.n	8001c16 <TIM_TimeBaseInit+0xb6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <TIM_TimeBaseInit+0xd4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00b      	beq.n	8001c16 <TIM_TimeBaseInit+0xb6>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <TIM_TimeBaseInit+0xec>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <TIM_TimeBaseInit+0xb6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <TIM_TimeBaseInit+0xf0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d003      	beq.n	8001c16 <TIM_TimeBaseInit+0xb6>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <TIM_TimeBaseInit+0xf4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d104      	bne.n	8001c20 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	7a1b      	ldrb	r3, [r3, #8]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	829a      	strh	r2, [r3, #20]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40012c00 	.word	0x40012c00
 8001c34:	40013400 	.word	0x40013400
 8001c38:	40000400 	.word	0x40000400
 8001c3c:	40000800 	.word	0x40000800
 8001c40:	40000c00 	.word	0x40000c00
 8001c44:	40001000 	.word	0x40001000
 8001c48:	40001400 	.word	0x40001400
 8001c4c:	40014000 	.word	0x40014000
 8001c50:	40014400 	.word	0x40014400
 8001c54:	40014800 	.word	0x40014800

08001c58 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	817b      	strh	r3, [r7, #10]
 8001c66:	2300      	movs	r3, #0
 8001c68:	81fb      	strh	r3, [r7, #14]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8c1b      	ldrh	r3, [r3, #32]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	f023 0310 	bic.w	r3, r3, #16
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	8c1b      	ldrh	r3, [r3, #32]
 8001c82:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	8b1b      	ldrh	r3, [r3, #24]
 8001c8e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 8001c90:	897b      	ldrh	r3, [r7, #10]
 8001c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c96:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9e:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	f023 0320 	bic.w	r3, r3, #32
 8001cb4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	891b      	ldrh	r3, [r3, #8]
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	885b      	ldrh	r3, [r3, #2]
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <TIM_OC2Init+0x108>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d003      	beq.n	8001ce2 <TIM_OC2Init+0x8a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <TIM_OC2Init+0x10c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d12b      	bne.n	8001d3a <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ce8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	895b      	ldrh	r3, [r3, #10]
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8001cf8:	89fb      	ldrh	r3, [r7, #14]
 8001cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cfe:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	889b      	ldrh	r3, [r3, #4]
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	89fb      	ldrh	r3, [r7, #14]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8001d0e:	89bb      	ldrh	r3, [r7, #12]
 8001d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d14:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8001d16:	89bb      	ldrh	r3, [r7, #12]
 8001d18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d1c:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	899b      	ldrh	r3, [r3, #12]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	89bb      	ldrh	r3, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	89db      	ldrh	r3, [r3, #14]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	89bb      	ldrh	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	89ba      	ldrh	r2, [r7, #12]
 8001d3e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	897a      	ldrh	r2, [r7, #10]
 8001d44:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	88da      	ldrh	r2, [r3, #6]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	89fa      	ldrh	r2, [r7, #14]
 8001d52:	841a      	strh	r2, [r3, #32]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40013400 	.word	0x40013400

08001d68 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d76:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	721a      	strb	r2, [r3, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	81da      	strh	r2, [r3, #14]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001dfe:	e007      	b.n	8001e10 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	801a      	strh	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	807b      	strh	r3, [r7, #2]
 8001e26:	4613      	mov	r3, r2
 8001e28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e2a:	787b      	ldrb	r3, [r7, #1]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	899b      	ldrh	r3, [r3, #12]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001e40:	e009      	b.n	8001e56 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	899b      	ldrh	r3, [r3, #12]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4013      	ands	r3, r2
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	819a      	strh	r2, [r3, #12]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	81bb      	strh	r3, [r7, #12]
 8001e74:	2300      	movs	r3, #0
 8001e76:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8a1b      	ldrh	r3, [r3, #16]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	4013      	ands	r3, r2
 8001e82:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	899b      	ldrh	r3, [r3, #12]
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001e90:	89bb      	ldrh	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <TIM_GetITStatus+0x42>
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	e001      	b.n	8001ea6 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	821a      	strh	r2, [r3, #16]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
	...

08001ed4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	8a1b      	ldrh	r3, [r3, #16]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f00:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001f04:	4013      	ands	r3, r2
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	88db      	ldrh	r3, [r3, #6]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	4313      	orrs	r3, r2
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	899b      	ldrh	r3, [r3, #12]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f26:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	889a      	ldrh	r2, [r3, #4]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	891b      	ldrh	r3, [r3, #8]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	4313      	orrs	r3, r2
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8a9b      	ldrh	r3, [r3, #20]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001f60:	4013      	ands	r3, r2
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	899b      	ldrh	r3, [r3, #12]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fb03 	bl	8001588 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <USART_Init+0x16c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d102      	bne.n	8001f90 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f8e:	e001      	b.n	8001f94 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	899b      	ldrh	r3, [r3, #12]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da0c      	bge.n	8001fba <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009a      	lsls	r2, r3, #2
 8001faa:	441a      	add	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	e00b      	b.n	8001fd2 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009a      	lsls	r2, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <USART_Init+0x170>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	2264      	movs	r2, #100	; 0x64
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	899b      	ldrh	r3, [r3, #12]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da0c      	bge.n	8002016 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	3332      	adds	r3, #50	; 0x32
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <USART_Init+0x170>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002010:	4313      	orrs	r3, r2
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002014:	e00b      	b.n	800202e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	3332      	adds	r3, #50	; 0x32
 800201c:	4a09      	ldr	r2, [pc, #36]	; (8002044 <USART_Init+0x170>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800202a:	4313      	orrs	r3, r2
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	811a      	strh	r2, [r3, #8]
}
 8002036:	bf00      	nop
 8002038:	3730      	adds	r7, #48	; 0x30
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40013800 	.word	0x40013800
 8002044:	51eb851f 	.word	0x51eb851f

08002048 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002056:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	220c      	movs	r2, #12
 800206e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	819a      	strh	r2, [r3, #12]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	899b      	ldrh	r3, [r3, #12]
 8002096:	b29b      	uxth	r3, r3
 8002098:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800209c:	b29a      	uxth	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80020a2:	e007      	b.n	80020b4 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	899b      	ldrh	r3, [r3, #12]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	819a      	strh	r2, [r3, #12]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80020be:	b480      	push	{r7}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	807b      	strh	r3, [r7, #2]
 80020ca:	4613      	mov	r3, r2
 80020cc:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80020f4:	2201      	movs	r2, #1
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d103      	bne.n	800210c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	330c      	adds	r3, #12
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e009      	b.n	8002120 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d103      	bne.n	800211a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3310      	adds	r3, #16
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	e002      	b.n	8002120 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3314      	adds	r3, #20
 800211e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8002132:	e006      	b.n	8002142 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	6811      	ldr	r1, [r2, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	43d2      	mvns	r2, r2
 800213e:	400a      	ands	r2, r1
 8002140:	601a      	str	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b29a      	uxth	r2, r3
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	4013      	ands	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e001      	b.n	8002176 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	43db      	mvns	r3, r3
 8002192:	b29a      	uxth	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	801a      	strh	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80021ae:	4908      	ldr	r1, [pc, #32]	; (80021d0 <NVIC_EnableIRQ+0x2c>)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	f002 021f 	and.w	r2, r2, #31
 80021bc:	2001      	movs	r0, #1
 80021be:	fa00 f202 	lsl.w	r2, r0, r2
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <RCC_init>:
#include "..\Includes\Init.h"




void RCC_init(){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);
 80021d8:	2101      	movs	r1, #1
 80021da:	203c      	movs	r0, #60	; 0x3c
 80021dc:	f7ff fa84 	bl	80016e8 <RCC_APB2PeriphClockCmd>
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80021e0:	2101      	movs	r1, #1
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7ff fa80 	bl	80016e8 <RCC_APB2PeriphClockCmd>
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80021e8:	2101      	movs	r1, #1
 80021ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021ee:	f7ff fa7b 	bl	80016e8 <RCC_APB2PeriphClockCmd>
	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80021f2:	2101      	movs	r1, #1
 80021f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021f8:	f7ff fa94 	bl	8001724 <RCC_APB1PeriphClockCmd>
	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80021fc:	2101      	movs	r1, #1
 80021fe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002202:	f7ff fa8f 	bl	8001724 <RCC_APB1PeriphClockCmd>
	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8002206:	2101      	movs	r1, #1
 8002208:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800220c:	f7ff fa8a 	bl	8001724 <RCC_APB1PeriphClockCmd>
	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 8002210:	2101      	movs	r1, #1
 8002212:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
 8002216:	f7ff fa85 	bl	8001724 <RCC_APB1PeriphClockCmd>

	 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800221a:	2101      	movs	r1, #1
 800221c:	2001      	movs	r0, #1
 800221e:	f7ff fa81 	bl	8001724 <RCC_APB1PeriphClockCmd>
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002222:	2101      	movs	r1, #1
 8002224:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002228:	f7ff fa5e 	bl	80016e8 <RCC_APB2PeriphClockCmd>

	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800222c:	2101      	movs	r1, #1
 800222e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002232:	f7ff fa59 	bl	80016e8 <RCC_APB2PeriphClockCmd>
	 RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8002236:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800223a:	f7ff f947 	bl	80014cc <RCC_ADCCLKConfig>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <GPIO_init>:

void GPIO_init(){
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;

	// SPI1
	GPIO_StructInit(&gpio);
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff f8b5 	bl	80013bc <GPIO_StructInit>
	gpio.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_7; // SCK, MOSI
 8002252:	23a0      	movs	r3, #160	; 0xa0
 8002254:	80bb      	strh	r3, [r7, #4]
	gpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8002256:	2318      	movs	r3, #24
 8002258:	71fb      	strb	r3, [r7, #7]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 800225a:	2303      	movs	r3, #3
 800225c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &gpio);
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4821      	ldr	r0, [pc, #132]	; (80022e8 <GPIO_init+0xa4>)
 8002264:	f7fe ffee 	bl	8001244 <GPIO_Init>

	gpio.GPIO_Pin = GPIO_Pin_6; // MISO
 8002268:	2340      	movs	r3, #64	; 0x40
 800226a:	80bb      	strh	r3, [r7, #4]
	gpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800226c:	2304      	movs	r3, #4
 800226e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &gpio);
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	4619      	mov	r1, r3
 8002274:	481c      	ldr	r0, [pc, #112]	; (80022e8 <GPIO_init+0xa4>)
 8002276:	f7fe ffe5 	bl	8001244 <GPIO_Init>

	gpio.GPIO_Pin = LCD_DC|LCD_CE|LCD_RST;
 800227a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800227e:	80bb      	strh	r3, [r7, #4]
	gpio.GPIO_Mode = GPIO_Mode_Out_PP;
 8002280:	2310      	movs	r3, #16
 8002282:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &gpio);
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	4619      	mov	r1, r3
 8002288:	4818      	ldr	r0, [pc, #96]	; (80022ec <GPIO_init+0xa8>)
 800228a:	f7fe ffdb 	bl	8001244 <GPIO_Init>
	GPIO_SetBits(GPIOB, LCD_CE|LCD_RST);
 800228e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002292:	4816      	ldr	r0, [pc, #88]	; (80022ec <GPIO_init+0xa8>)
 8002294:	f7ff f8a5 	bl	80013e2 <GPIO_SetBits>

	// USART
	GPIO_StructInit(&gpio);
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f88e 	bl	80013bc <GPIO_StructInit>
	gpio.GPIO_Pin = GPIO_Pin_10;	// TX
 80022a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a4:	80bb      	strh	r3, [r7, #4]
	gpio.GPIO_Mode = GPIO_Mode_AF_PP;
 80022a6:	2318      	movs	r3, #24
 80022a8:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &gpio);
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	480f      	ldr	r0, [pc, #60]	; (80022ec <GPIO_init+0xa8>)
 80022b0:	f7fe ffc8 	bl	8001244 <GPIO_Init>

	gpio.GPIO_Pin = GPIO_Pin_11;	// RX
 80022b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b8:	80bb      	strh	r3, [r7, #4]
	gpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80022ba:	2304      	movs	r3, #4
 80022bc:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &gpio);
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	480a      	ldr	r0, [pc, #40]	; (80022ec <GPIO_init+0xa8>)
 80022c4:	f7fe ffbe 	bl	8001244 <GPIO_Init>

	// Timer channel output
	gpio.GPIO_Pin = GPIO_Pin_1;
 80022c8:	2302      	movs	r3, #2
 80022ca:	80bb      	strh	r3, [r7, #4]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 80022cc:	2303      	movs	r3, #3
 80022ce:	71bb      	strb	r3, [r7, #6]
	gpio.GPIO_Mode = GPIO_Mode_AF_PP;
 80022d0:	2318      	movs	r3, #24
 80022d2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &gpio);
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <GPIO_init+0xa4>)
 80022da:	f7fe ffb3 	bl	8001244 <GPIO_Init>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40010800 	.word	0x40010800
 80022ec:	40010c00 	.word	0x40010c00

080022f0 <TIM_init>:

void TIM_init(){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef tim;
	TIM_OCInitTypeDef  channel;

	TIM_TimeBaseStructInit(&tim);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fd34 	bl	8001d68 <TIM_TimeBaseStructInit>
	tim.TIM_CounterMode = TIM_CounterMode_Up;
 8002300:	2300      	movs	r3, #0
 8002302:	82fb      	strh	r3, [r7, #22]
	tim.TIM_Prescaler = 640 - 1;
 8002304:	f240 237f 	movw	r3, #639	; 0x27f
 8002308:	82bb      	strh	r3, [r7, #20]
	tim.TIM_Period = 1000 - 1;
 800230a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800230e:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseInit(TIM2, &tim);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800231a:	f7ff fc21 	bl	8001b60 <TIM_TimeBaseInit>

	TIM_OCStructInit(&channel);
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fd3a 	bl	8001d9a <TIM_OCStructInit>
	channel.TIM_OCMode = TIM_OCMode_PWM1;
 8002326:	2360      	movs	r3, #96	; 0x60
 8002328:	80bb      	strh	r3, [r7, #4]
	channel.TIM_OutputState = TIM_OutputState_Enable;
 800232a:	2301      	movs	r3, #1
 800232c:	80fb      	strh	r3, [r7, #6]
	channel.TIM_Pulse = 500;
 800232e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002332:	817b      	strh	r3, [r7, #10]
	TIM_OC2Init(TIM2, &channel);
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	4619      	mov	r1, r3
 8002338:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800233c:	f7ff fc8c 	bl	8001c58 <TIM_OC2Init>


	TIM_Cmd(TIM2, ENABLE);
 8002340:	2101      	movs	r1, #1
 8002342:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002346:	f7ff fd49 	bl	8001ddc <TIM_Cmd>


	tim.TIM_CounterMode = TIM_CounterMode_Up;
 800234a:	2300      	movs	r3, #0
 800234c:	82fb      	strh	r3, [r7, #22]
	tim.TIM_Prescaler = 36000 - 1;
 800234e:	f648 439f 	movw	r3, #35999	; 0x8c9f
 8002352:	82bb      	strh	r3, [r7, #20]
	tim.TIM_Period = 1000 - 1;
 8002354:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002358:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseInit(TIM1, &tim);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	4807      	ldr	r0, [pc, #28]	; (8002380 <TIM_init+0x90>)
 8002362:	f7ff fbfd 	bl	8001b60 <TIM_TimeBaseInit>

	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
 8002366:	2201      	movs	r2, #1
 8002368:	2101      	movs	r1, #1
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <TIM_init+0x90>)
 800236c:	f7ff fd55 	bl	8001e1a <TIM_ITConfig>

	TIM_Cmd(TIM1, ENABLE);
 8002370:	2101      	movs	r1, #1
 8002372:	4803      	ldr	r0, [pc, #12]	; (8002380 <TIM_init+0x90>)
 8002374:	f7ff fd32 	bl	8001ddc <TIM_Cmd>

}
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40012c00 	.word	0x40012c00

08002384 <USART_init>:


void USART_init(){
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
	USART_InitTypeDef uart;

	USART_StructInit(&uart);
 800238a:	463b      	mov	r3, r7
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe5b 	bl	8002048 <USART_StructInit>
	uart.USART_BaudRate = 9600;
 8002392:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002396:	603b      	str	r3, [r7, #0]
	USART_Init(USART3, &uart);
 8002398:	463b      	mov	r3, r7
 800239a:	4619      	mov	r1, r3
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <USART_init+0x40>)
 800239e:	f7ff fd99 	bl	8001ed4 <USART_Init>

	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 80023a2:	2201      	movs	r2, #1
 80023a4:	f240 5125 	movw	r1, #1317	; 0x525
 80023a8:	4806      	ldr	r0, [pc, #24]	; (80023c4 <USART_init+0x40>)
 80023aa:	f7ff fe88 	bl	80020be <USART_ITConfig>

	NVIC_EnableIRQ(USART3_IRQn);
 80023ae:	2027      	movs	r0, #39	; 0x27
 80023b0:	f7ff fef8 	bl	80021a4 <NVIC_EnableIRQ>

	USART_Cmd(USART3, ENABLE);
 80023b4:	2101      	movs	r1, #1
 80023b6:	4803      	ldr	r0, [pc, #12]	; (80023c4 <USART_init+0x40>)
 80023b8:	f7ff fe62 	bl	8002080 <USART_Cmd>
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40004800 	.word	0x40004800

080023c8 <RTC_init>:

void RTC_init(int H, int M, int S){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
	PWR_BackupAccessCmd(ENABLE);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7ff f869 	bl	80014ac <PWR_BackupAccessCmd>
	BKP_DeInit();
 80023da:	f7fe ff29 	bl	8001230 <BKP_DeInit>
	RCC_LSEConfig(RCC_LSE_ON);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff f890 	bl	8001504 <RCC_LSEConfig>
	while(RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET){
 80023e4:	bf00      	nop
 80023e6:	2041      	movs	r0, #65	; 0x41
 80023e8:	f7ff f9ca 	bl	8001780 <RCC_GetFlagStatus>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f9      	beq.n	80023e6 <RTC_init+0x1e>
	}

	RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);
 80023f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023f6:	f7ff f8a5 	bl	8001544 <RCC_RTCCLKConfig>
	int Value = 3600*H + M*60 + S;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002400:	fb02 f103 	mul.w	r1, r2, r3
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	18ca      	adds	r2, r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
	RTC_SetCounter(Value);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fa59 	bl	80018d0 <RTC_SetCounter>
	RCC_RTCCLKCmd(ENABLE);
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff f8a2 	bl	8001568 <RCC_RTCCLKCmd>

	RTC_WaitForSynchro();
 8002424:	f7ff fa96 	bl	8001954 <RTC_WaitForSynchro>
	RTC_WaitForLastTask();
 8002428:	f7ff fa84 	bl	8001934 <RTC_WaitForLastTask>
	RTC_ITConfig(RTC_IT_SEC, ENABLE);
 800242c:	2101      	movs	r1, #1
 800242e:	2001      	movs	r0, #1
 8002430:	f7ff f9e0 	bl	80017f4 <RTC_ITConfig>
	NVIC_EnableIRQ(RTC_IRQn);
 8002434:	2003      	movs	r0, #3
 8002436:	f7ff feb5 	bl	80021a4 <NVIC_EnableIRQ>
	RTC_WaitForLastTask();
 800243a:	f7ff fa7b 	bl	8001934 <RTC_WaitForLastTask>
	RTC_SetPrescaler(32767);
 800243e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8002442:	f7ff fa5d 	bl	8001900 <RTC_SetPrescaler>
	RTC_WaitForLastTask();
 8002446:	f7ff fa75 	bl	8001934 <RTC_WaitForLastTask>


	//RTC_EnterConfigMode();


}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <SPI_init>:

void SPI_init(){
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
	SPI_InitTypeDef spi;
	SPI_StructInit(&spi);
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fb06 	bl	8001a6e <SPI_StructInit>
	spi.SPI_Mode = SPI_Mode_Master;
 8002462:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002466:	80fb      	strh	r3, [r7, #6]
	spi.SPI_NSS = SPI_NSS_Soft;
 8002468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246c:	81fb      	strh	r3, [r7, #14]
	spi.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 800246e:	2318      	movs	r3, #24
 8002470:	823b      	strh	r3, [r7, #16]
	SPI_Init(SPI1, &spi);
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	4619      	mov	r1, r3
 8002476:	480e      	ldr	r0, [pc, #56]	; (80024b0 <SPI_init+0x5c>)
 8002478:	f7ff fab6 	bl	80019e8 <SPI_Init>
	SPI_Cmd(SPI1, ENABLE);
 800247c:	2101      	movs	r1, #1
 800247e:	480c      	ldr	r0, [pc, #48]	; (80024b0 <SPI_init+0x5c>)
 8002480:	f7ff fb19 	bl	8001ab6 <SPI_Cmd>

	spi.SPI_Mode = SPI_Mode_Master;
 8002484:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002488:	80fb      	strh	r3, [r7, #6]
	spi.SPI_NSS = SPI_NSS_Soft;
 800248a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248e:	81fb      	strh	r3, [r7, #14]
	spi.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
 8002490:	2328      	movs	r3, #40	; 0x28
 8002492:	823b      	strh	r3, [r7, #16]
	SPI_Init(SPI2, &spi);
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	4619      	mov	r1, r3
 8002498:	4806      	ldr	r0, [pc, #24]	; (80024b4 <SPI_init+0x60>)
 800249a:	f7ff faa5 	bl	80019e8 <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 800249e:	2101      	movs	r1, #1
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <SPI_init+0x60>)
 80024a2:	f7ff fb08 	bl	8001ab6 <SPI_Cmd>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40013000 	.word	0x40013000
 80024b4:	40003800 	.word	0x40003800

080024b8 <IWDG_init>:
	i2c.I2C_ClockSpeed = 1000;
	I2C_Init(I2C1, &i2c);
	I2C_Cmd(I2C1, ENABLE);
}

void IWDG_init(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 80024bc:	f245 5055 	movw	r0, #21845	; 0x5555
 80024c0:	f7fe ffac 	bl	800141c <IWDG_WriteAccessCmd>
	IWDG_SetPrescaler(IWDG_Prescaler_256);
 80024c4:	2006      	movs	r0, #6
 80024c6:	f7fe ffb9 	bl	800143c <IWDG_SetPrescaler>
	IWDG_SetReload(0xFFFF);
 80024ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024ce:	f7fe ffc5 	bl	800145c <IWDG_SetReload>
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <ADC_init>:


void ADC_init(){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
	ADC_InitTypeDef adc;

	ADC_StructInit(&adc);
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fd23 	bl	8000f2c <ADC_StructInit>
	adc.ADC_ContinuousConvMode = ENABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	727b      	strb	r3, [r7, #9]
	adc.ADC_NbrOfChannel = 1;
 80024ea:	2301      	movs	r3, #1
 80024ec:	753b      	strb	r3, [r7, #20]
	adc.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 80024ee:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80024f2:	60fb      	str	r3, [r7, #12]
	ADC_Init(ADC1, &adc);
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4815      	ldr	r0, [pc, #84]	; (8002550 <ADC_init+0x78>)
 80024fa:	f7fe fcc5 	bl	8000e88 <ADC_Init>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_16, 1, ADC_SampleTime_71Cycles5);
 80024fe:	2306      	movs	r3, #6
 8002500:	2201      	movs	r2, #1
 8002502:	2110      	movs	r1, #16
 8002504:	4812      	ldr	r0, [pc, #72]	; (8002550 <ADC_init+0x78>)
 8002506:	f7fe fdae 	bl	8001066 <ADC_RegularChannelConfig>
	ADC_Cmd(ADC1, ENABLE);
 800250a:	2101      	movs	r1, #1
 800250c:	4810      	ldr	r0, [pc, #64]	; (8002550 <ADC_init+0x78>)
 800250e:	f7fe fd28 	bl	8000f62 <ADC_Cmd>

	ADC_ResetCalibration(ADC1);
 8002512:	480f      	ldr	r0, [pc, #60]	; (8002550 <ADC_init+0x78>)
 8002514:	f7fe fd40 	bl	8000f98 <ADC_ResetCalibration>
	while (ADC_GetResetCalibrationStatus(ADC1));
 8002518:	bf00      	nop
 800251a:	480d      	ldr	r0, [pc, #52]	; (8002550 <ADC_init+0x78>)
 800251c:	f7fe fd4b 	bl	8000fb6 <ADC_GetResetCalibrationStatus>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <ADC_init+0x42>

	ADC_StartCalibration(ADC1);
 8002526:	480a      	ldr	r0, [pc, #40]	; (8002550 <ADC_init+0x78>)
 8002528:	f7fe fd5c 	bl	8000fe4 <ADC_StartCalibration>
	while (ADC_GetCalibrationStatus(ADC1));
 800252c:	bf00      	nop
 800252e:	4808      	ldr	r0, [pc, #32]	; (8002550 <ADC_init+0x78>)
 8002530:	f7fe fd67 	bl	8001002 <ADC_GetCalibrationStatus>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <ADC_init+0x56>

	ADC_TempSensorVrefintCmd(ENABLE);
 800253a:	2001      	movs	r0, #1
 800253c:	f7fe fe5c 	bl	80011f8 <ADC_TempSensorVrefintCmd>
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8002540:	2101      	movs	r1, #1
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <ADC_init+0x78>)
 8002544:	f7fe fd74 	bl	8001030 <ADC_SoftwareStartConvCmd>
}
 8002548:	bf00      	nop
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40012400 	.word	0x40012400

08002554 <SPI_SendRecv>:
#define LCD_BUFFER_SIZE			(84 * 48 / 8)

uint8_t lcd_buffer[LCD_BUFFER_SIZE];

static uint8_t SPI_SendRecv(uint8_t byte)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
 // poczekaj az bufor nadawczy bedzie wolny
 while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 800255e:	bf00      	nop
 8002560:	2102      	movs	r1, #2
 8002562:	480e      	ldr	r0, [pc, #56]	; (800259c <SPI_SendRecv+0x48>)
 8002564:	f7ff fae0 	bl	8001b28 <SPI_I2S_GetFlagStatus>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f8      	beq.n	8002560 <SPI_SendRecv+0xc>
 SPI_I2S_SendData(SPI1, byte);
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	b29b      	uxth	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	4809      	ldr	r0, [pc, #36]	; (800259c <SPI_SendRecv+0x48>)
 8002576:	f7ff fabd 	bl	8001af4 <SPI_I2S_SendData>

 // poczekaj na dane w buforze odbiorczym
 while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 800257a:	bf00      	nop
 800257c:	2101      	movs	r1, #1
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <SPI_SendRecv+0x48>)
 8002580:	f7ff fad2 	bl	8001b28 <SPI_I2S_GetFlagStatus>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f8      	beq.n	800257c <SPI_SendRecv+0x28>
 return SPI_I2S_ReceiveData(SPI1);
 800258a:	4804      	ldr	r0, [pc, #16]	; (800259c <SPI_SendRecv+0x48>)
 800258c:	f7ff fac0 	bl	8001b10 <SPI_I2S_ReceiveData>
 8002590:	4603      	mov	r3, r0
 8002592:	b2db      	uxtb	r3, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40013000 	.word	0x40013000

080025a0 <LCD_CMD>:

static void LCD_CMD(uint8_t cmd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
 GPIO_ResetBits(LCD_GPIO_PORT, LCD_CE|LCD_DC);
 80025aa:	21c0      	movs	r1, #192	; 0xc0
 80025ac:	4807      	ldr	r0, [pc, #28]	; (80025cc <LCD_CMD+0x2c>)
 80025ae:	f7fe ff26 	bl	80013fe <GPIO_ResetBits>
 SPI_SendRecv(cmd);
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ffcd 	bl	8002554 <SPI_SendRecv>
 GPIO_SetBits(LCD_GPIO_PORT, LCD_CE);
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <LCD_CMD+0x2c>)
 80025be:	f7fe ff10 	bl	80013e2 <GPIO_SetBits>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40010c00 	.word	0x40010c00

080025d0 <LCD_Setup>:

void LCD_Setup(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
 GPIO_ResetBits(LCD_GPIO_PORT, LCD_RST);
 80025d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025d8:	480c      	ldr	r0, [pc, #48]	; (800260c <LCD_Setup+0x3c>)
 80025da:	f7fe ff10 	bl	80013fe <GPIO_ResetBits>
 GPIO_SetBits(LCD_GPIO_PORT, LCD_RST);
 80025de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e2:	480a      	ldr	r0, [pc, #40]	; (800260c <LCD_Setup+0x3c>)
 80025e4:	f7fe fefd 	bl	80013e2 <GPIO_SetBits>

 LCD_CMD(PCD8544_FUNCTION_SET | 1);
 80025e8:	2021      	movs	r0, #33	; 0x21
 80025ea:	f7ff ffd9 	bl	80025a0 <LCD_CMD>
 LCD_CMD(PCD8544_H_BIAS | 4);
 80025ee:	2014      	movs	r0, #20
 80025f0:	f7ff ffd6 	bl	80025a0 <LCD_CMD>
 LCD_CMD(0x80 | 0x3f); //Ustawienie kontrastu
 80025f4:	20bf      	movs	r0, #191	; 0xbf
 80025f6:	f7ff ffd3 	bl	80025a0 <LCD_CMD>
 LCD_CMD(PCD8544_FUNCTION_SET);
 80025fa:	2020      	movs	r0, #32
 80025fc:	f7ff ffd0 	bl	80025a0 <LCD_CMD>
 LCD_CMD(PCD8544_DISP_NORMAL);
 8002600:	200c      	movs	r0, #12
 8002602:	f7ff ffcd 	bl	80025a0 <LCD_CMD>

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40010c00 	.word	0x40010c00

08002610 <LCD_Clear>:

void LCD_Clear(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
 memset(lcd_buffer, 0, LCD_BUFFER_SIZE);
 8002614:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002618:	2100      	movs	r1, #0
 800261a:	4802      	ldr	r0, [pc, #8]	; (8002624 <LCD_Clear+0x14>)
 800261c:	f000 ffa3 	bl	8003566 <memset>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000070 	.word	0x20000070

08002628 <LCD_DrawBitmap>:

void LCD_DrawBitmap(const uint8_t* data)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 memcpy(lcd_buffer, data, LCD_BUFFER_SIZE);
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <LCD_DrawBitmap+0x24>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800263c:	461a      	mov	r2, r3
 800263e:	f000 ff87 	bl	8003550 <memcpy>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000070 	.word	0x20000070

08002650 <LCD_DrawText>:

void LCD_DrawText(int row, int col, const char* text)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 int i;
 uint8_t* pbuf = &lcd_buffer[row * 84 + col];
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2254      	movs	r2, #84	; 0x54
 8002660:	fb02 f203 	mul.w	r2, r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4413      	add	r3, r2
 8002668:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <LCD_DrawText+0x84>)
 800266a:	4413      	add	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
 while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 800266e:	e023      	b.n	80026b8 <LCD_DrawText+0x68>
 int ch = *text++;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	613b      	str	r3, [r7, #16]
 const uint8_t* font = &font_ASCII[ch - ' '][0];
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f1a3 0220 	sub.w	r2, r3, #32
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <LCD_DrawText+0x88>)
 8002688:	4413      	add	r3, r2
 800268a:	617b      	str	r3, [r7, #20]
 for (i = 0; i < 5; i++) {
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	e00a      	b.n	80026a8 <LCD_DrawText+0x58>
 *pbuf++ = *font++;
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	61ba      	str	r2, [r7, #24]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	1c51      	adds	r1, r2, #1
 800269c:	6179      	str	r1, [r7, #20]
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	701a      	strb	r2, [r3, #0]
 for (i = 0; i < 5; i++) {
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	ddf1      	ble.n	8002692 <LCD_DrawText+0x42>
 }
 *pbuf++ = 0;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	61ba      	str	r2, [r7, #24]
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
 while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6])) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <LCD_DrawText+0x78>
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4a06      	ldr	r2, [pc, #24]	; (80026dc <LCD_DrawText+0x8c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d3d3      	bcc.n	8002670 <LCD_DrawText+0x20>
 }
}
 80026c8:	bf00      	nop
 80026ca:	3724      	adds	r7, #36	; 0x24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000070 	.word	0x20000070
 80026d8:	08005b80 	.word	0x08005b80
 80026dc:	20000262 	.word	0x20000262

080026e0 <LCD_Copy>:

void LCD_Copy(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 int i;
 GPIO_SetBits(LCD_GPIO_PORT, LCD_DC);
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	480f      	ldr	r0, [pc, #60]	; (8002728 <LCD_Copy+0x48>)
 80026ea:	f7fe fe7a 	bl	80013e2 <GPIO_SetBits>
 GPIO_ResetBits(LCD_GPIO_PORT, LCD_CE);
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	480d      	ldr	r0, [pc, #52]	; (8002728 <LCD_Copy+0x48>)
 80026f2:	f7fe fe84 	bl	80013fe <GPIO_ResetBits>
 for (i = 0; i < LCD_BUFFER_SIZE; i++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	e009      	b.n	8002710 <LCD_Copy+0x30>
 SPI_SendRecv(lcd_buffer[i]);
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <LCD_Copy+0x4c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff25 	bl	8002554 <SPI_SendRecv>
 for (i = 0; i < LCD_BUFFER_SIZE; i++)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3301      	adds	r3, #1
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002716:	dbf1      	blt.n	80026fc <LCD_Copy+0x1c>
 GPIO_SetBits(LCD_GPIO_PORT, LCD_CE);
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <LCD_Copy+0x48>)
 800271c:	f7fe fe61 	bl	80013e2 <GPIO_SetBits>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40010c00 	.word	0x40010c00
 800272c:	20000070 	.word	0x20000070

08002730 <NVIC_EnableIRQ>:
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <NVIC_EnableIRQ+0x2c>)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	79fa      	ldrb	r2, [r7, #7]
 8002744:	f002 021f 	and.w	r2, r2, #31
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100

08002760 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	da0b      	bge.n	800278c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002774:	490d      	ldr	r1, [pc, #52]	; (80027ac <NVIC_SetPriority+0x4c>)
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	3b04      	subs	r3, #4
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800278a:	e009      	b.n	80027a0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800278c:	4908      	ldr	r1, [pc, #32]	; (80027b0 <NVIC_SetPriority+0x50>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	0112      	lsls	r2, r2, #4
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	440b      	add	r3, r1
 800279c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c2:	d301      	bcc.n	80027c8 <SysTick_Config+0x14>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e011      	b.n	80027ec <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <SysTick_Config+0x40>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027d0:	3b01      	subs	r3, #1
 80027d2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 80027d4:	210f      	movs	r1, #15
 80027d6:	f04f 30ff 	mov.w	r0, #4294967295
 80027da:	f7ff ffc1 	bl	8002760 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <SysTick_Config+0x40>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <SysTick_Config+0x40>)
 80027e6:	2207      	movs	r2, #7
 80027e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	e000e010 	.word	0xe000e010

080027f8 <delay_ms>:

unsigned int State = 0;

int ticks;

void delay_ms(int i){
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	ticks = 0;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <delay_ms+0x24>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
	while(ticks < i);
 8002806:	bf00      	nop
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <delay_ms+0x24>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	dbfa      	blt.n	8002808 <delay_ms+0x10>
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000284 	.word	0x20000284

08002820 <main>:
 while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 return SPI_I2S_ReceiveData(SPI2);
}

int main(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b090      	sub	sp, #64	; 0x40
 8002824:	af00      	add	r7, sp, #0
	RCC_init();
 8002826:	f7ff fcd5 	bl	80021d4 <RCC_init>
	GPIO_init();
 800282a:	f7ff fd0b 	bl	8002244 <GPIO_init>
	SPI_init();
 800282e:	f7ff fe11 	bl	8002454 <SPI_init>
	USART_init();
 8002832:	f7ff fda7 	bl	8002384 <USART_init>
	IWDG_init();
 8002836:	f7ff fe3f 	bl	80024b8 <IWDG_init>

	ADC_init();
 800283a:	f7ff fe4d 	bl	80024d8 <ADC_init>
	TIM_init();
 800283e:	f7ff fd57 	bl	80022f0 <TIM_init>

	RCC_ClocksTypeDef clock;
	RCC_GetClocksFreq(&clock);
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fe9e 	bl	8001588 <RCC_GetClocksFreq>

	long int SYSclk, Hclk, Pclk1, Pclk2;
	SYSclk = clock.SYSCLK_Frequency;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
	Hclk = clock.HCLK_Frequency;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	633b      	str	r3, [r7, #48]	; 0x30
	Pclk1 = clock.PCLK1_Frequency;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
	Pclk2 = clock.PCLK2_Frequency;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28

	SysTick_Config(SystemCoreClock / 1000);
 800285c:	4b58      	ldr	r3, [pc, #352]	; (80029c0 <main+0x1a0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <main+0x1a4>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ffa3 	bl	80027b4 <SysTick_Config>

	LCD_Setup();
 800286e:	f7ff feaf 	bl	80025d0 <LCD_Setup>
	LCD_Clear();
 8002872:	f7ff fecd 	bl	8002610 <LCD_Clear>
	LCD_DrawBitmap(Start_logo);
 8002876:	4854      	ldr	r0, [pc, #336]	; (80029c8 <main+0x1a8>)
 8002878:	f7ff fed6 	bl	8002628 <LCD_DrawBitmap>
	LCD_Copy();
 800287c:	f7ff ff30 	bl	80026e0 <LCD_Copy>
	delay_ms(4000);
 8002880:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002884:	f7ff ffb8 	bl	80027f8 <delay_ms>

	/* Wait for the WiFi connection */
	int i = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int ErrorCounter = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM2 -> CCR2 = 0;
 8002890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002894:	2200      	movs	r2, #0
 8002896:	871a      	strh	r2, [r3, #56]	; 0x38
	while(ConnectedToWiFi == RESET){
 8002898:	e053      	b.n	8002942 <main+0x122>
		i = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
		while(i<18){
 800289e:	e01c      	b.n	80028da <main+0xba>
			LCD_Clear();
 80028a0:	f7ff feb6 	bl	8002610 <LCD_Clear>
			LCD_DrawBitmap(Gif[i]);
 80028a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028a6:	4613      	mov	r3, r2
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4a47      	ldr	r2, [pc, #284]	; (80029cc <main+0x1ac>)
 80028b0:	4413      	add	r3, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff feb8 	bl	8002628 <LCD_DrawBitmap>
			LCD_Copy();
 80028b8:	f7ff ff12 	bl	80026e0 <LCD_Copy>
			TIM2->CCR2 += 55;
 80028bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028c4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3337      	adds	r3, #55	; 0x37
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	8713      	strh	r3, [r2, #56]	; 0x38
			delay_ms(25);
 80028ce:	2019      	movs	r0, #25
 80028d0:	f7ff ff92 	bl	80027f8 <delay_ms>
			i++;
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	3301      	adds	r3, #1
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		while(i<18){
 80028da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028dc:	2b11      	cmp	r3, #17
 80028de:	dddf      	ble.n	80028a0 <main+0x80>
		}
		i = 16;
 80028e0:	2310      	movs	r3, #16
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		TIM2 -> CCR2 = 990;
 80028e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028e8:	f240 32de 	movw	r2, #990	; 0x3de
 80028ec:	871a      	strh	r2, [r3, #56]	; 0x38
		while(i>0){
 80028ee:	e01c      	b.n	800292a <main+0x10a>
			LCD_Clear();
 80028f0:	f7ff fe8e 	bl	8002610 <LCD_Clear>
			LCD_DrawBitmap(Gif[i]);
 80028f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028f6:	4613      	mov	r3, r2
 80028f8:	019b      	lsls	r3, r3, #6
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4a33      	ldr	r2, [pc, #204]	; (80029cc <main+0x1ac>)
 8002900:	4413      	add	r3, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fe90 	bl	8002628 <LCD_DrawBitmap>
			LCD_Copy();
 8002908:	f7ff feea 	bl	80026e0 <LCD_Copy>
			TIM2->CCR2 -= 55;
 800290c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002910:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002914:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b37      	subs	r3, #55	; 0x37
 800291a:	b29b      	uxth	r3, r3
 800291c:	8713      	strh	r3, [r2, #56]	; 0x38
			delay_ms(25);
 800291e:	2019      	movs	r0, #25
 8002920:	f7ff ff6a 	bl	80027f8 <delay_ms>
			i--;
 8002924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002926:	3b01      	subs	r3, #1
 8002928:	63fb      	str	r3, [r7, #60]	; 0x3c
		while(i>0){
 800292a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	dcdf      	bgt.n	80028f0 <main+0xd0>
		}
		ErrorCounter++;
 8002930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002932:	3301      	adds	r3, #1
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
		/* If after multiple tries no WiFi connection was set - proceed*/
		if (ErrorCounter == 33){
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	2b21      	cmp	r3, #33	; 0x21
 800293a:	d102      	bne.n	8002942 <main+0x122>
			ConnectedToWiFi == SET;
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <main+0x1b0>)
 800293e:	781b      	ldrb	r3, [r3, #0]
			break;
 8002940:	e004      	b.n	800294c <main+0x12c>
	while(ConnectedToWiFi == RESET){
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <main+0x1b0>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0a6      	beq.n	800289a <main+0x7a>
		}
	}
	TIM2 -> CCR2 = 350;
 800294c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002950:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002954:	871a      	strh	r2, [r3, #56]	; 0x38
	if(ConnectedToWiFi == RESET){
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <main+0x1b0>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d13f      	bne.n	80029e0 <main+0x1c0>
		LCD_Clear();
 8002960:	f7ff fe56 	bl	8002610 <LCD_Clear>
		LCD_DrawText(0, 0, "NO WiFi Conn.");
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <main+0x1b4>)
 8002966:	2100      	movs	r1, #0
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff fe71 	bl	8002650 <LCD_DrawText>
		if (ConnectedToBMP280 == RESET){
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <main+0x1b8>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d104      	bne.n	8002982 <main+0x162>
			LCD_DrawText(2, 0, "NO BMP Conn.");
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <main+0x1bc>)
 800297a:	2100      	movs	r1, #0
 800297c:	2002      	movs	r0, #2
 800297e:	f7ff fe67 	bl	8002650 <LCD_DrawText>
		}
		LCD_Copy();
 8002982:	f7ff fead 	bl	80026e0 <LCD_Copy>
		int CurrentRTC = RTC_GetCounter();
 8002986:	f7fe ff7b 	bl	8001880 <RTC_GetCounter>
 800298a:	4603      	mov	r3, r0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
		delay_ms(5000);
 800298e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002992:	f7ff ff31 	bl	80027f8 <delay_ms>
		if (CurrentRTC == RTC_GetCounter()){
 8002996:	f7fe ff73 	bl	8001880 <RTC_GetCounter>
 800299a:	4602      	mov	r2, r0
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	429a      	cmp	r2, r3
 80029a0:	d105      	bne.n	80029ae <main+0x18e>
			RTC_init(12, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	200c      	movs	r0, #12
 80029a8:	f7ff fd0e 	bl	80023c8 <RTC_init>
 80029ac:	e03c      	b.n	8002a28 <main+0x208>
		}else{
			RTC_ITConfig(RTC_IT_SEC, ENABLE);
 80029ae:	2101      	movs	r1, #1
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7fe ff1f 	bl	80017f4 <RTC_ITConfig>
			NVIC_EnableIRQ(RTC_IRQn);
 80029b6:	2003      	movs	r0, #3
 80029b8:	f7ff feba 	bl	8002730 <NVIC_EnableIRQ>
 80029bc:	e034      	b.n	8002a28 <main+0x208>
 80029be:	bf00      	nop
 80029c0:	20000044 	.word	0x20000044
 80029c4:	10624dd3 	.word	0x10624dd3
 80029c8:	08005988 	.word	0x08005988
 80029cc:	08003618 	.word	0x08003618
 80029d0:	20000065 	.word	0x20000065
 80029d4:	08003590 	.word	0x08003590
 80029d8:	20000066 	.word	0x20000066
 80029dc:	080035a0 	.word	0x080035a0
		}
	}else{
		LCD_Clear();
 80029e0:	f7ff fe16 	bl	8002610 <LCD_Clear>
		LCD_DrawText(0, 0, "WiFi CONNECTED");
 80029e4:	4a68      	ldr	r2, [pc, #416]	; (8002b88 <main+0x368>)
 80029e6:	2100      	movs	r1, #0
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff fe31 	bl	8002650 <LCD_DrawText>
		LCD_DrawText(5, 0, "Please wait...");
 80029ee:	4a67      	ldr	r2, [pc, #412]	; (8002b8c <main+0x36c>)
 80029f0:	2100      	movs	r1, #0
 80029f2:	2005      	movs	r0, #5
 80029f4:	f7ff fe2c 	bl	8002650 <LCD_DrawText>
		LCD_Copy();
 80029f8:	f7ff fe72 	bl	80026e0 <LCD_Copy>
		while (State != TIME_SENT);
 80029fc:	bf00      	nop
 80029fe:	4b64      	ldr	r3, [pc, #400]	; (8002b90 <main+0x370>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b0a      	cmp	r3, #10
 8002a04:	d1fb      	bne.n	80029fe <main+0x1de>
		while (TimeUpdated != SET);
 8002a06:	bf00      	nop
 8002a08:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <main+0x374>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d1fa      	bne.n	8002a08 <main+0x1e8>
		RTC_init(HourRTC, MinuteRTC, SecondRTC);
 8002a12:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <main+0x378>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	4b60      	ldr	r3, [pc, #384]	; (8002b9c <main+0x37c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4b60      	ldr	r3, [pc, #384]	; (8002ba0 <main+0x380>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f7ff fcd0 	bl	80023c8 <RTC_init>
	}

	IWDG_ReloadCounter();
 8002a28:	f7fe fd28 	bl	800147c <IWDG_ReloadCounter>
	IWDG_Enable();
 8002a2c:	f7fe fd32 	bl	8001494 <IWDG_Enable>
	char c[10];
	Display = SET;
 8002a30:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <main+0x384>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
	while(1){
		if(UpdateRTC == SET){
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <main+0x388>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d115      	bne.n	8002a6c <main+0x24c>
			RTC_SetCounter(3600*HourRTC + MinuteRTC*60 + SecondRTC);
 8002a40:	4b55      	ldr	r3, [pc, #340]	; (8002b98 <main+0x378>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002a48:	fb02 f103 	mul.w	r1, r2, r3
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <main+0x37c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	18ca      	adds	r2, r1, r3
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <main+0x380>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe ff35 	bl	80018d0 <RTC_SetCounter>
			UpdateRTC = RESET;
 8002a66:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <main+0x388>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
		}
		if (Display == SET){
 8002a6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ba4 <main+0x384>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d1df      	bne.n	8002a36 <main+0x216>
			int Time = RTC_GetCounter() % 86400;
 8002a76:	f7fe ff03 	bl	8001880 <RTC_GetCounter>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <main+0x38c>)
 8002a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	494a      	ldr	r1, [pc, #296]	; (8002bb0 <main+0x390>)
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	623b      	str	r3, [r7, #32]
			Hour = Time/3600;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	4a48      	ldr	r2, [pc, #288]	; (8002bb4 <main+0x394>)
 8002a92:	fb82 1203 	smull	r1, r2, r2, r3
 8002a96:	441a      	add	r2, r3
 8002a98:	12d2      	asrs	r2, r2, #11
 8002a9a:	17db      	asrs	r3, r3, #31
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b45      	ldr	r3, [pc, #276]	; (8002bb8 <main+0x398>)
 8002aa2:	601a      	str	r2, [r3, #0]
			Minute = (Time%3600)/60;
 8002aa4:	6a3a      	ldr	r2, [r7, #32]
 8002aa6:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <main+0x394>)
 8002aa8:	fb83 1302 	smull	r1, r3, r3, r2
 8002aac:	4413      	add	r3, r2
 8002aae:	12d9      	asrs	r1, r3, #11
 8002ab0:	17d3      	asrs	r3, r2, #31
 8002ab2:	1acb      	subs	r3, r1, r3
 8002ab4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <main+0x39c>)
 8002ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ac4:	441a      	add	r2, r3
 8002ac6:	1152      	asrs	r2, r2, #5
 8002ac8:	17db      	asrs	r3, r3, #31
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <main+0x3a0>)
 8002ad0:	601a      	str	r2, [r3, #0]
			Second = (Time%3600)%60;
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	4a37      	ldr	r2, [pc, #220]	; (8002bb4 <main+0x394>)
 8002ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8002ada:	441a      	add	r2, r3
 8002adc:	12d1      	asrs	r1, r2, #11
 8002ade:	17da      	asrs	r2, r3, #31
 8002ae0:	1a8a      	subs	r2, r1, r2
 8002ae2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002ae6:	fb01 f202 	mul.w	r2, r1, r2
 8002aea:	1a9a      	subs	r2, r3, r2
 8002aec:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <main+0x39c>)
 8002aee:	fb83 1302 	smull	r1, r3, r3, r2
 8002af2:	4413      	add	r3, r2
 8002af4:	1159      	asrs	r1, r3, #5
 8002af6:	17d3      	asrs	r3, r2, #31
 8002af8:	1ac9      	subs	r1, r1, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	1a5b      	subs	r3, r3, r1
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	1ad1      	subs	r1, r2, r3
 8002b04:	460a      	mov	r2, r1
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <main+0x3a4>)
 8002b08:	601a      	str	r2, [r3, #0]
			LCD_Clear();
 8002b0a:	f7ff fd81 	bl	8002610 <LCD_Clear>
			if (TimeUpdated == SET){
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <main+0x374>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <main+0x308>
				LCD_DrawText(0, 75, "U");
 8002b18:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <main+0x3a8>)
 8002b1a:	214b      	movs	r1, #75	; 0x4b
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7ff fd97 	bl	8002650 <LCD_DrawText>
				TimeUpdated = RESET;
 8002b22:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <main+0x374>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
			}
			if(ConnectedToWiFi == RESET){
 8002b28:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <main+0x3ac>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d104      	bne.n	8002b3c <main+0x31c>
				LCD_DrawText(5, 0, "NO WiFi");
 8002b32:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <main+0x3b0>)
 8002b34:	2100      	movs	r1, #0
 8002b36:	2005      	movs	r0, #5
 8002b38:	f7ff fd8a 	bl	8002650 <LCD_DrawText>
			}
			if(ConnectedToBMP280 == RESET){
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <main+0x3b4>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <main+0x330>
				LCD_DrawText(5, 42, " | BMP");
 8002b46:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <main+0x3b8>)
 8002b48:	212a      	movs	r1, #42	; 0x2a
 8002b4a:	2005      	movs	r0, #5
 8002b4c:	f7ff fd80 	bl	8002650 <LCD_DrawText>
			}
			LCD_PrintTime(0, Hour, Minute, Second);
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <main+0x398>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <main+0x3a0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <main+0x3a4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2000      	movs	r0, #0
 8002b62:	f000 f83f 	bl	8002be4 <LCD_PrintTime>
			LCD_PrintTemperature(1, Temperature);
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <main+0x3bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f000 f8b5 	bl	8002cdc <LCD_PrintTemperature>
			LCD_PrintPressure(3, Pressure);
 8002b72:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <main+0x3c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f000 f93f 	bl	8002dfc <LCD_PrintPressure>

			Display = RESET;
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <main+0x384>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
		if(UpdateRTC == SET){
 8002b84:	e757      	b.n	8002a36 <main+0x216>
 8002b86:	bf00      	nop
 8002b88:	080035b0 	.word	0x080035b0
 8002b8c:	080035c0 	.word	0x080035c0
 8002b90:	2000006c 	.word	0x2000006c
 8002b94:	20000068 	.word	0x20000068
 8002b98:	20000270 	.word	0x20000270
 8002b9c:	20000278 	.word	0x20000278
 8002ba0:	20000280 	.word	0x20000280
 8002ba4:	20000064 	.word	0x20000064
 8002ba8:	20000067 	.word	0x20000067
 8002bac:	c22e4507 	.word	0xc22e4507
 8002bb0:	00015180 	.word	0x00015180
 8002bb4:	91a2b3c5 	.word	0x91a2b3c5
 8002bb8:	20000274 	.word	0x20000274
 8002bbc:	88888889 	.word	0x88888889
 8002bc0:	2000027c 	.word	0x2000027c
 8002bc4:	20000268 	.word	0x20000268
 8002bc8:	080035d0 	.word	0x080035d0
 8002bcc:	20000065 	.word	0x20000065
 8002bd0:	080035d4 	.word	0x080035d4
 8002bd4:	20000066 	.word	0x20000066
 8002bd8:	080035dc 	.word	0x080035dc
 8002bdc:	2000026c 	.word	0x2000026c
 8002be0:	20000288 	.word	0x20000288

08002be4 <LCD_PrintTime>:



}

void LCD_PrintTime(int row, int Hour, int Minute, int Second){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
	char c[10];
	if(row >= 6){
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	dd01      	ble.n	8002bfc <LCD_PrintTime+0x18>
		row = 6;
 8002bf8:	2306      	movs	r3, #6
 8002bfa:	60fb      	str	r3, [r7, #12]
	}
	sprintf(c, "%d", Hour);
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	4933      	ldr	r1, [pc, #204]	; (8002cd0 <LCD_PrintTime+0xec>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fc68 	bl	80034da <siprintf>
	if(Hour < 10){
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b09      	cmp	r3, #9
 8002c0e:	dc0c      	bgt.n	8002c2a <LCD_PrintTime+0x46>
		LCD_DrawText(row, 0, "0");
 8002c10:	4a30      	ldr	r2, [pc, #192]	; (8002cd4 <LCD_PrintTime+0xf0>)
 8002c12:	2100      	movs	r1, #0
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff fd1b 	bl	8002650 <LCD_DrawText>
		LCD_DrawText(row, 6, c);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2106      	movs	r1, #6
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff fd14 	bl	8002650 <LCD_DrawText>
 8002c28:	e006      	b.n	8002c38 <LCD_PrintTime+0x54>
	}else LCD_DrawText(row, 0, c);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2100      	movs	r1, #0
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff fd0c 	bl	8002650 <LCD_DrawText>
	LCD_DrawText(row, 14, ":");
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <LCD_PrintTime+0xf4>)
 8002c3a:	210e      	movs	r1, #14
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff fd07 	bl	8002650 <LCD_DrawText>
	sprintf(c, "%d", Minute);
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4921      	ldr	r1, [pc, #132]	; (8002cd0 <LCD_PrintTime+0xec>)
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fc45 	bl	80034da <siprintf>
	if(Minute < 10){
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b09      	cmp	r3, #9
 8002c54:	dc0c      	bgt.n	8002c70 <LCD_PrintTime+0x8c>
		LCD_DrawText(row, 21, "0");
 8002c56:	4a1f      	ldr	r2, [pc, #124]	; (8002cd4 <LCD_PrintTime+0xf0>)
 8002c58:	2115      	movs	r1, #21
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff fcf8 	bl	8002650 <LCD_DrawText>
		LCD_DrawText(row, 27, c);
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	461a      	mov	r2, r3
 8002c66:	211b      	movs	r1, #27
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff fcf1 	bl	8002650 <LCD_DrawText>
 8002c6e:	e006      	b.n	8002c7e <LCD_PrintTime+0x9a>
	}else LCD_DrawText(row, 21, c);
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	461a      	mov	r2, r3
 8002c76:	2115      	movs	r1, #21
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff fce9 	bl	8002650 <LCD_DrawText>
	LCD_DrawText(row, 35, ":");
 8002c7e:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <LCD_PrintTime+0xf4>)
 8002c80:	2123      	movs	r1, #35	; 0x23
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fce4 	bl	8002650 <LCD_DrawText>
	sprintf(c, "%d", Second);
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	4910      	ldr	r1, [pc, #64]	; (8002cd0 <LCD_PrintTime+0xec>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fc22 	bl	80034da <siprintf>
	if(Second < 10){
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	dc0c      	bgt.n	8002cb6 <LCD_PrintTime+0xd2>
		LCD_DrawText(row, 42, "0");
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <LCD_PrintTime+0xf0>)
 8002c9e:	212a      	movs	r1, #42	; 0x2a
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fcd5 	bl	8002650 <LCD_DrawText>
		LCD_DrawText(row, 48, c);
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	461a      	mov	r2, r3
 8002cac:	2130      	movs	r1, #48	; 0x30
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff fcce 	bl	8002650 <LCD_DrawText>
 8002cb4:	e006      	b.n	8002cc4 <LCD_PrintTime+0xe0>
	}else LCD_DrawText(row, 42, c);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	461a      	mov	r2, r3
 8002cbc:	212a      	movs	r1, #42	; 0x2a
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff fcc6 	bl	8002650 <LCD_DrawText>
	LCD_Copy();
 8002cc4:	f7ff fd0c 	bl	80026e0 <LCD_Copy>
}
 8002cc8:	bf00      	nop
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	080035e4 	.word	0x080035e4
 8002cd4:	080035e8 	.word	0x080035e8
 8002cd8:	080035ec 	.word	0x080035ec

08002cdc <LCD_PrintTemperature>:

void LCD_PrintTemperature(int row, float Temperature){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
	if(row >= 5){
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	dd01      	ble.n	8002cf0 <LCD_PrintTemperature+0x14>
		row = 5;
 8002cec:	2305      	movs	r3, #5
 8002cee:	607b      	str	r3, [r7, #4]
	}
	char c[10];
	LCD_DrawText(row, 0, "Temperatura:");
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	; (8002de0 <LCD_PrintTemperature+0x104>)
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fcab 	bl	8002650 <LCD_DrawText>
	sprintf(c, "%d", (int)Temperature);
 8002cfa:	6838      	ldr	r0, [r7, #0]
 8002cfc:	f7fe f89e 	bl	8000e3c <__aeabi_f2iz>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	4937      	ldr	r1, [pc, #220]	; (8002de4 <LCD_PrintTemperature+0x108>)
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fbe6 	bl	80034da <siprintf>
	LCD_DrawText(row+1, 0, c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3301      	adds	r3, #1
 8002d12:	f107 020c 	add.w	r2, r7, #12
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fc99 	bl	8002650 <LCD_DrawText>
	LCD_DrawText(row+1, 14, ".");
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3301      	adds	r3, #1
 8002d22:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <LCD_PrintTemperature+0x10c>)
 8002d24:	210e      	movs	r1, #14
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fc92 	bl	8002650 <LCD_DrawText>
	sprintf(c, "%d", ((int)(Temperature*100)) % 100);
 8002d2c:	492f      	ldr	r1, [pc, #188]	; (8002dec <LCD_PrintTemperature+0x110>)
 8002d2e:	6838      	ldr	r0, [r7, #0]
 8002d30:	f7fd ff34 	bl	8000b9c <__aeabi_fmul>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe f880 	bl	8000e3c <__aeabi_f2iz>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <LCD_PrintTemperature+0x114>)
 8002d40:	fb83 1302 	smull	r1, r3, r3, r2
 8002d44:	1159      	asrs	r1, r3, #5
 8002d46:	17d3      	asrs	r3, r2, #31
 8002d48:	1acb      	subs	r3, r1, r3
 8002d4a:	2164      	movs	r1, #100	; 0x64
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f107 000c 	add.w	r0, r7, #12
 8002d56:	461a      	mov	r2, r3
 8002d58:	4922      	ldr	r1, [pc, #136]	; (8002de4 <LCD_PrintTemperature+0x108>)
 8002d5a:	f000 fbbe 	bl	80034da <siprintf>
	if ((((int)(Temperature*100)) % 100) < 10){
 8002d5e:	4923      	ldr	r1, [pc, #140]	; (8002dec <LCD_PrintTemperature+0x110>)
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	f7fd ff1b 	bl	8000b9c <__aeabi_fmul>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe f867 	bl	8000e3c <__aeabi_f2iz>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <LCD_PrintTemperature+0x114>)
 8002d72:	fb83 1302 	smull	r1, r3, r3, r2
 8002d76:	1159      	asrs	r1, r3, #5
 8002d78:	17d3      	asrs	r3, r2, #31
 8002d7a:	1acb      	subs	r3, r1, r3
 8002d7c:	2164      	movs	r1, #100	; 0x64
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b09      	cmp	r3, #9
 8002d86:	dc16      	bgt.n	8002db6 <LCD_PrintTemperature+0xda>
		LCD_DrawText(row+1, 21, "0");
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <LCD_PrintTemperature+0x118>)
 8002d8e:	2115      	movs	r1, #21
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fc5d 	bl	8002650 <LCD_DrawText>
		LCD_DrawText(row+1, 27, c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f107 020c 	add.w	r2, r7, #12
 8002d9e:	211b      	movs	r1, #27
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fc55 	bl	8002650 <LCD_DrawText>
		LCD_DrawText(row+1, 34, "C");
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3301      	adds	r3, #1
 8002daa:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <LCD_PrintTemperature+0x11c>)
 8002dac:	2122      	movs	r1, #34	; 0x22
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fc4e 	bl	8002650 <LCD_DrawText>
 8002db4:	e00e      	b.n	8002dd4 <LCD_PrintTemperature+0xf8>
	}else {
		LCD_DrawText(row+1, 21, c);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3301      	adds	r3, #1
 8002dba:	f107 020c 	add.w	r2, r7, #12
 8002dbe:	2115      	movs	r1, #21
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fc45 	bl	8002650 <LCD_DrawText>
		LCD_DrawText(row+1, 34, "C");
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <LCD_PrintTemperature+0x11c>)
 8002dcc:	2122      	movs	r1, #34	; 0x22
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fc3e 	bl	8002650 <LCD_DrawText>
	}
	LCD_Copy();
 8002dd4:	f7ff fc84 	bl	80026e0 <LCD_Copy>
}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	080035f0 	.word	0x080035f0
 8002de4:	080035e4 	.word	0x080035e4
 8002de8:	08003600 	.word	0x08003600
 8002dec:	42c80000 	.word	0x42c80000
 8002df0:	51eb851f 	.word	0x51eb851f
 8002df4:	080035e8 	.word	0x080035e8
 8002df8:	08003604 	.word	0x08003604

08002dfc <LCD_PrintPressure>:

void LCD_PrintPressure(int row,  int Pressure){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	if(row >= 5){
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	dd01      	ble.n	8002e10 <LCD_PrintPressure+0x14>
		row = 5;
 8002e0c:	2305      	movs	r3, #5
 8002e0e:	607b      	str	r3, [r7, #4]
	}
	Pressure = Pressure;
	char c[10];
	LCD_DrawText(row, 0, "Cisnienie:");
 8002e10:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <LCD_PrintPressure+0x70>)
 8002e12:	2100      	movs	r1, #0
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff fc1b 	bl	8002650 <LCD_DrawText>
	sprintf(c, "%d", Pressure);
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	4913      	ldr	r1, [pc, #76]	; (8002e70 <LCD_PrintPressure+0x74>)
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fb59 	bl	80034da <siprintf>
	LCD_DrawText(row+1, 0, c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f107 020c 	add.w	r2, r7, #12
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fc0c 	bl	8002650 <LCD_DrawText>
	if (Pressure >= 1000){
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e3e:	db07      	blt.n	8002e50 <LCD_PrintPressure+0x54>
		LCD_DrawText(row+1, 26, "hPa");
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3301      	adds	r3, #1
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <LCD_PrintPressure+0x78>)
 8002e46:	211a      	movs	r1, #26
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fc01 	bl	8002650 <LCD_DrawText>
 8002e4e:	e006      	b.n	8002e5e <LCD_PrintPressure+0x62>
	}else{
		LCD_DrawText(row+1, 19, "hPa");
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <LCD_PrintPressure+0x78>)
 8002e56:	2113      	movs	r1, #19
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fbf9 	bl	8002650 <LCD_DrawText>
	}
	LCD_Copy();
 8002e5e:	f7ff fc3f 	bl	80026e0 <LCD_Copy>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08003608 	.word	0x08003608
 8002e70:	080035e4 	.word	0x080035e4
 8002e74:	08003614 	.word	0x08003614

08002e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e7e:	e003      	b.n	8002e88 <LoopCopyDataInit>

08002e80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002e82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e86:	3104      	adds	r1, #4

08002e88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e88:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002e8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e90:	d3f6      	bcc.n	8002e80 <CopyDataInit>
	ldr	r2, =_sbss
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002e94:	e002      	b.n	8002e9c <LoopFillZerobss>

08002e96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e98:	f842 3b04 	str.w	r3, [r2], #4

08002e9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002e9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ea0:	d3f9      	bcc.n	8002e96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ea2:	f000 f981 	bl	80031a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ea6:	f000 fb2f 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eaa:	f7ff fcb9 	bl	8002820 <main>
	bx	lr
 8002eae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002eb0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002eb4:	08005d68 	.word	0x08005d68
	ldr	r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ebc:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 8002ec0:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8002ec4:	2000028c 	.word	0x2000028c

08002ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_2_IRQHandler>

08002eca <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <HardFault_Handler+0x4>

08002edc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <MemManage_Handler+0x4>

08002ee2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <BusFault_Handler+0x4>

08002ee8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <UsageFault_Handler+0x4>

08002eee <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
	...

08002f14 <SysTick_Handler>:
  * @param  None
  * @retval None
  */

void SysTick_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
	ticks++;
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <SysTick_Handler+0x18>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	4a03      	ldr	r2, [pc, #12]	; (8002f2c <SysTick_Handler+0x18>)
 8002f20:	6013      	str	r3, [r2, #0]
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000284 	.word	0x20000284

08002f30 <USART3_IRQHandler>:
/*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f10x_md.s).                                            */
/******************************************************************************/

void USART3_IRQHandler(){
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
	if(USART_GetFlagStatus(USART3, USART_FLAG_RXNE) == SET){
 8002f36:	2120      	movs	r1, #32
 8002f38:	4874      	ldr	r0, [pc, #464]	; (800310c <USART3_IRQHandler+0x1dc>)
 8002f3a:	f7ff f907 	bl	800214c <USART_GetFlagStatus>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 80d9 	bne.w	80030f8 <USART3_IRQHandler+0x1c8>
		char c = USART3->DR;
 8002f46:	4b71      	ldr	r3, [pc, #452]	; (800310c <USART3_IRQHandler+0x1dc>)
 8002f48:	889b      	ldrh	r3, [r3, #4]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	71fb      	strb	r3, [r7, #7]
		if(State != STOP){
 8002f4e:	4b70      	ldr	r3, [pc, #448]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b0d      	cmp	r3, #13
 8002f54:	f000 80c6 	beq.w	80030e4 <USART3_IRQHandler+0x1b4>
			if (c == '$'){
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b24      	cmp	r3, #36	; 0x24
 8002f5c:	d102      	bne.n	8002f64 <USART3_IRQHandler+0x34>
				State = STOP;
 8002f5e:	4b6c      	ldr	r3, [pc, #432]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002f60:	220d      	movs	r2, #13
 8002f62:	601a      	str	r2, [r3, #0]
			}
			if (c == 'w' && ConnectedToWiFi == RESET){
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b77      	cmp	r3, #119	; 0x77
 8002f68:	d107      	bne.n	8002f7a <USART3_IRQHandler+0x4a>
 8002f6a:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <USART3_IRQHandler+0x1e4>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <USART3_IRQHandler+0x4a>
				ConnectedToWiFi = SET;
 8002f74:	4b67      	ldr	r3, [pc, #412]	; (8003114 <USART3_IRQHandler+0x1e4>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
			}
			if (c == 'b' && ConnectedToBMP280 == RESET){
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	2b62      	cmp	r3, #98	; 0x62
 8002f7e:	d107      	bne.n	8002f90 <USART3_IRQHandler+0x60>
 8002f80:	4b65      	ldr	r3, [pc, #404]	; (8003118 <USART3_IRQHandler+0x1e8>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <USART3_IRQHandler+0x60>
				ConnectedToBMP280 = SET;
 8002f8a:	4b63      	ldr	r3, [pc, #396]	; (8003118 <USART3_IRQHandler+0x1e8>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
			}
			if (c == 'h' && (State == TIME_SENT || State == IDLE || State == TEMP_SENT || State == PRESSURE_SENT)){
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	2b68      	cmp	r3, #104	; 0x68
 8002f94:	d113      	bne.n	8002fbe <USART3_IRQHandler+0x8e>
 8002f96:	4b5e      	ldr	r3, [pc, #376]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b0a      	cmp	r3, #10
 8002f9c:	d00b      	beq.n	8002fb6 <USART3_IRQHandler+0x86>
 8002f9e:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <USART3_IRQHandler+0x86>
 8002fa6:	4b5a      	ldr	r3, [pc, #360]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b0b      	cmp	r3, #11
 8002fac:	d003      	beq.n	8002fb6 <USART3_IRQHandler+0x86>
 8002fae:	4b58      	ldr	r3, [pc, #352]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d103      	bne.n	8002fbe <USART3_IRQHandler+0x8e>
				State = STARTED;
 8002fb6:	4b56      	ldr	r3, [pc, #344]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e09c      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if (State == 1){
 8002fbe:	4b54      	ldr	r3, [pc, #336]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d106      	bne.n	8002fd4 <USART3_IRQHandler+0xa4>
				HourRTC = c - '\0';
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4a54      	ldr	r2, [pc, #336]	; (800311c <USART3_IRQHandler+0x1ec>)
 8002fca:	6013      	str	r3, [r2, #0]
				State = 2;
 8002fcc:	4b50      	ldr	r3, [pc, #320]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fce:	2202      	movs	r2, #2
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e091      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if (State == 2){
 8002fd4:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d106      	bne.n	8002fea <USART3_IRQHandler+0xba>
				MinuteRTC = c - '\0';
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	4a50      	ldr	r2, [pc, #320]	; (8003120 <USART3_IRQHandler+0x1f0>)
 8002fe0:	6013      	str	r3, [r2, #0]
				State = 3;
 8002fe2:	4b4b      	ldr	r3, [pc, #300]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e086      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if (State == 3){
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d10c      	bne.n	800300c <USART3_IRQHandler+0xdc>
				SecondRTC  = c - '\0';
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4a4b      	ldr	r2, [pc, #300]	; (8003124 <USART3_IRQHandler+0x1f4>)
 8002ff6:	6013      	str	r3, [r2, #0]
				TimeUpdated = SET;
 8002ff8:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <USART3_IRQHandler+0x1f8>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
				UpdateRTC = SET;
 8002ffe:	4b4b      	ldr	r3, [pc, #300]	; (800312c <USART3_IRQHandler+0x1fc>)
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
				State = TIME_SENT;
 8003004:	4b42      	ldr	r3, [pc, #264]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8003006:	220a      	movs	r2, #10
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e075      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if(c == 't'){
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	2b74      	cmp	r3, #116	; 0x74
 8003010:	d103      	bne.n	800301a <USART3_IRQHandler+0xea>
				State = 4;
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8003014:	2204      	movs	r2, #4
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e06e      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if (State == 4){
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <USART3_IRQHandler+0x1e0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b04      	cmp	r3, #4
 8003020:	d10a      	bne.n	8003038 <USART3_IRQHandler+0x108>
				Temperature = c - '\0';
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fd65 	bl	8000af4 <__aeabi_i2f>
 800302a:	4602      	mov	r2, r0
 800302c:	4b40      	ldr	r3, [pc, #256]	; (8003130 <USART3_IRQHandler+0x200>)
 800302e:	601a      	str	r2, [r3, #0]
				State = 5;
 8003030:	4b37      	ldr	r3, [pc, #220]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8003032:	2205      	movs	r2, #5
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e05f      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if (State == 5){
 8003038:	4b35      	ldr	r3, [pc, #212]	; (8003110 <USART3_IRQHandler+0x1e0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b05      	cmp	r3, #5
 800303e:	d127      	bne.n	8003090 <USART3_IRQHandler+0x160>
				int x = c - '\0';
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	603b      	str	r3, [r7, #0]
				Temperature += (float)x/100.0;
 8003044:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <USART3_IRQHandler+0x200>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd f9e3 	bl	8000414 <__aeabi_f2d>
 800304e:	4604      	mov	r4, r0
 8003050:	460d      	mov	r5, r1
 8003052:	6838      	ldr	r0, [r7, #0]
 8003054:	f7fd fd4e 	bl	8000af4 <__aeabi_i2f>
 8003058:	4603      	mov	r3, r0
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd f9da 	bl	8000414 <__aeabi_f2d>
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	4b33      	ldr	r3, [pc, #204]	; (8003134 <USART3_IRQHandler+0x204>)
 8003066:	f7fd fb53 	bl	8000710 <__aeabi_ddiv>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd f871 	bl	8000158 <__adddf3>
 8003076:	4603      	mov	r3, r0
 8003078:	460c      	mov	r4, r1
 800307a:	4618      	mov	r0, r3
 800307c:	4621      	mov	r1, r4
 800307e:	f7fd fc2f 	bl	80008e0 <__aeabi_d2f>
 8003082:	4602      	mov	r2, r0
 8003084:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <USART3_IRQHandler+0x200>)
 8003086:	601a      	str	r2, [r3, #0]
				State = TEMP_SENT;
 8003088:	4b21      	ldr	r3, [pc, #132]	; (8003110 <USART3_IRQHandler+0x1e0>)
 800308a:	220b      	movs	r2, #11
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e033      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if (c == 'p'){
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	2b70      	cmp	r3, #112	; 0x70
 8003094:	d103      	bne.n	800309e <USART3_IRQHandler+0x16e>
				State = 6;
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <USART3_IRQHandler+0x1e0>)
 8003098:	2206      	movs	r2, #6
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e02c      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if (State == 6){
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <USART3_IRQHandler+0x1e0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d109      	bne.n	80030ba <USART3_IRQHandler+0x18a>
				Pressure = (c - '\0')*100;
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2264      	movs	r2, #100	; 0x64
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <USART3_IRQHandler+0x208>)
 80030b0:	6013      	str	r3, [r2, #0]
				State = 7;
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <USART3_IRQHandler+0x1e0>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e01e      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else if (State == 7){
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <USART3_IRQHandler+0x1e0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b07      	cmp	r3, #7
 80030c0:	d10c      	bne.n	80030dc <USART3_IRQHandler+0x1ac>
				Pressure += (c - '\0');
 80030c2:	79fa      	ldrb	r2, [r7, #7]
 80030c4:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <USART3_IRQHandler+0x208>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <USART3_IRQHandler+0x208>)
 80030cc:	6013      	str	r3, [r2, #0]
				State = PRESSURE_SENT;
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <USART3_IRQHandler+0x1e0>)
 80030d0:	220c      	movs	r2, #12
 80030d2:	601a      	str	r2, [r3, #0]
				Display = SET;
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <USART3_IRQHandler+0x20c>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e00d      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}else {
				State = IDLE;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <USART3_IRQHandler+0x1e0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	e009      	b.n	80030f8 <USART3_IRQHandler+0x1c8>
			}
		}else if (State == STOP && c == '^'){
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <USART3_IRQHandler+0x1e0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b0d      	cmp	r3, #13
 80030ea:	d105      	bne.n	80030f8 <USART3_IRQHandler+0x1c8>
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2b5e      	cmp	r3, #94	; 0x5e
 80030f0:	d102      	bne.n	80030f8 <USART3_IRQHandler+0x1c8>
			State = IDLE;
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <USART3_IRQHandler+0x1e0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
		}
	}
	IWDG_ReloadCounter();
 80030f8:	f7fe f9c0 	bl	800147c <IWDG_ReloadCounter>
	USART_ClearFlag(USART3, USART_FLAG_RXNE);
 80030fc:	2120      	movs	r1, #32
 80030fe:	4803      	ldr	r0, [pc, #12]	; (800310c <USART3_IRQHandler+0x1dc>)
 8003100:	f7ff f83f 	bl	8002182 <USART_ClearFlag>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bdb0      	pop	{r4, r5, r7, pc}
 800310c:	40004800 	.word	0x40004800
 8003110:	2000006c 	.word	0x2000006c
 8003114:	20000065 	.word	0x20000065
 8003118:	20000066 	.word	0x20000066
 800311c:	20000270 	.word	0x20000270
 8003120:	20000278 	.word	0x20000278
 8003124:	20000280 	.word	0x20000280
 8003128:	20000068 	.word	0x20000068
 800312c:	20000067 	.word	0x20000067
 8003130:	2000026c 	.word	0x2000026c
 8003134:	40590000 	.word	0x40590000
 8003138:	20000288 	.word	0x20000288
 800313c:	20000064 	.word	0x20000064

08003140 <RTC_IRQHandler>:


void RTC_IRQHandler(){
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	if(RTC_GetFlagStatus(RTC_FLAG_SEC) == SET){
 8003144:	2001      	movs	r0, #1
 8003146:	f7fe fc1d 	bl	8001984 <RTC_GetFlagStatus>
 800314a:	4603      	mov	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d104      	bne.n	800315a <RTC_IRQHandler+0x1a>
		Display = SET;
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <RTC_IRQHandler+0x24>)
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
		IWDG_ReloadCounter();
 8003156:	f7fe f991 	bl	800147c <IWDG_ReloadCounter>

	}
	RTC_ClearITPendingBit(RTC_IT_SEC);
 800315a:	2001      	movs	r0, #1
 800315c:	f7fe fc2e 	bl	80019bc <RTC_ClearITPendingBit>
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000064 	.word	0x20000064

08003168 <TIM1_UP_IRQHandler>:


void TIM1_UP_IRQHandler(){
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM1, TIM_FLAG_Update) == SET){
 800316c:	2101      	movs	r1, #1
 800316e:	480b      	ldr	r0, [pc, #44]	; (800319c <TIM1_UP_IRQHandler+0x34>)
 8003170:	f7fe fe76 	bl	8001e60 <TIM_GetITStatus>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d109      	bne.n	800318e <TIM1_UP_IRQHandler+0x26>
		/* Reset watchdog */
		IWDG_ReloadCounter();
 800317a:	f7fe f97f 	bl	800147c <IWDG_ReloadCounter>
		TIM2 -> CCR2 = DutyCycle[Hour];
 800317e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <TIM1_UP_IRQHandler+0x38>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4907      	ldr	r1, [pc, #28]	; (80031a4 <TIM1_UP_IRQHandler+0x3c>)
 8003188:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800318c:	8713      	strh	r3, [r2, #56]	; 0x38

	}
	TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
 800318e:	2101      	movs	r1, #1
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <TIM1_UP_IRQHandler+0x34>)
 8003192:	f7fe fe8e 	bl	8001eb2 <TIM_ClearITPendingBit>
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	20000274 	.word	0x20000274
 80031a4:	20000014 	.word	0x20000014

080031a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <SystemInit+0x5c>)
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <SystemInit+0x5c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80031b8:	4912      	ldr	r1, [pc, #72]	; (8003204 <SystemInit+0x5c>)
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <SystemInit+0x5c>)
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <SystemInit+0x60>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <SystemInit+0x5c>)
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <SystemInit+0x5c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031d4:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <SystemInit+0x5c>)
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <SystemInit+0x5c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80031e0:	4a08      	ldr	r2, [pc, #32]	; (8003204 <SystemInit+0x5c>)
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <SystemInit+0x5c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80031ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <SystemInit+0x5c>)
 80031ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80031f2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80031f4:	f000 f80c 	bl	8003210 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <SystemInit+0x64>)
 80031fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021000 	.word	0x40021000
 8003208:	f8ff0000 	.word	0xf8ff0000
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003214:	f000 f802 	bl	800321c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	2300      	movs	r3, #0
 8003228:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800322a:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <SetSysClockTo72+0xf8>)
 800322c:	4b39      	ldr	r3, [pc, #228]	; (8003314 <SetSysClockTo72+0xf8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <SetSysClockTo72+0xf8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3301      	adds	r3, #1
 8003244:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <SetSysClockTo72+0x38>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003252:	d1f0      	bne.n	8003236 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <SetSysClockTo72+0xf8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003260:	2301      	movs	r3, #1
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	e001      	b.n	800326a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003266:	2300      	movs	r3, #0
 8003268:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d14b      	bne.n	8003308 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003270:	4a29      	ldr	r2, [pc, #164]	; (8003318 <SetSysClockTo72+0xfc>)
 8003272:	4b29      	ldr	r3, [pc, #164]	; (8003318 <SetSysClockTo72+0xfc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f043 0310 	orr.w	r3, r3, #16
 800327a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800327c:	4a26      	ldr	r2, [pc, #152]	; (8003318 <SetSysClockTo72+0xfc>)
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <SetSysClockTo72+0xfc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <SetSysClockTo72+0xfc>)
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <SetSysClockTo72+0xfc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003294:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <SetSysClockTo72+0xf8>)
 8003296:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <SetSysClockTo72+0xf8>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <SetSysClockTo72+0xf8>)
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <SetSysClockTo72+0xf8>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <SetSysClockTo72+0xf8>)
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <SetSysClockTo72+0xf8>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <SetSysClockTo72+0xf8>)
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <SetSysClockTo72+0xf8>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80032ba:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <SetSysClockTo72+0xf8>)
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <SetSysClockTo72+0xf8>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80032c6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <SetSysClockTo72+0xf8>)
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <SetSysClockTo72+0xf8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80032d4:	bf00      	nop
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <SetSysClockTo72+0xf8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f9      	beq.n	80032d6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80032e2:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <SetSysClockTo72+0xf8>)
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <SetSysClockTo72+0xf8>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 0303 	bic.w	r3, r3, #3
 80032ec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <SetSysClockTo72+0xf8>)
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <SetSysClockTo72+0xf8>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80032fa:	bf00      	nop
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <SetSysClockTo72+0xf8>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d1f9      	bne.n	80032fc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	40022000 	.word	0x40022000

0800331c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003328:	2301      	movs	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800332c:	e004      	b.n	8003338 <ts_itoa+0x1c>
		div *= base;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d2f3      	bcs.n	800332e <ts_itoa+0x12>

	while (div != 0)
 8003346:	e029      	b.n	800339c <ts_itoa+0x80>
	{
		int num = d/div;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	fbb3 f1f2 	udiv	r1, r3, r2
 800335a:	fb02 f201 	mul.w	r2, r2, r1
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	fb92 f3f3 	sdiv	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b09      	cmp	r3, #9
 8003370:	dd0a      	ble.n	8003388 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	6011      	str	r1, [r2, #0]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	3237      	adds	r2, #55	; 0x37
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e009      	b.n	800339c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	6011      	str	r1, [r2, #0]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	3230      	adds	r2, #48	; 0x30
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1d2      	bne.n	8003348 <ts_itoa+0x2c>
	}
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80033bc:	e07d      	b.n	80034ba <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b25      	cmp	r3, #37	; 0x25
 80033c4:	d171      	bne.n	80034aa <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3301      	adds	r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b64      	cmp	r3, #100	; 0x64
 80033d2:	d01e      	beq.n	8003412 <ts_formatstring+0x66>
 80033d4:	2b64      	cmp	r3, #100	; 0x64
 80033d6:	dc06      	bgt.n	80033e6 <ts_formatstring+0x3a>
 80033d8:	2b58      	cmp	r3, #88	; 0x58
 80033da:	d050      	beq.n	800347e <ts_formatstring+0xd2>
 80033dc:	2b63      	cmp	r3, #99	; 0x63
 80033de:	d00e      	beq.n	80033fe <ts_formatstring+0x52>
 80033e0:	2b25      	cmp	r3, #37	; 0x25
 80033e2:	d058      	beq.n	8003496 <ts_formatstring+0xea>
 80033e4:	e05d      	b.n	80034a2 <ts_formatstring+0xf6>
 80033e6:	2b73      	cmp	r3, #115	; 0x73
 80033e8:	d02b      	beq.n	8003442 <ts_formatstring+0x96>
 80033ea:	2b73      	cmp	r3, #115	; 0x73
 80033ec:	dc02      	bgt.n	80033f4 <ts_formatstring+0x48>
 80033ee:	2b69      	cmp	r3, #105	; 0x69
 80033f0:	d00f      	beq.n	8003412 <ts_formatstring+0x66>
 80033f2:	e056      	b.n	80034a2 <ts_formatstring+0xf6>
 80033f4:	2b75      	cmp	r3, #117	; 0x75
 80033f6:	d037      	beq.n	8003468 <ts_formatstring+0xbc>
 80033f8:	2b78      	cmp	r3, #120	; 0x78
 80033fa:	d040      	beq.n	800347e <ts_formatstring+0xd2>
 80033fc:	e051      	b.n	80034a2 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	1d11      	adds	r1, r2, #4
 8003408:	6079      	str	r1, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]
				break;
 8003410:	e047      	b.n	80034a2 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	1d1a      	adds	r2, r3, #4
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b00      	cmp	r3, #0
 8003420:	da07      	bge.n	8003432 <ts_formatstring+0x86>
					{
						val *= -1;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	425b      	negs	r3, r3
 8003426:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	60fa      	str	r2, [r7, #12]
 800342e:	222d      	movs	r2, #45	; 0x2d
 8003430:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003432:	69f9      	ldr	r1, [r7, #28]
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	220a      	movs	r2, #10
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ff6e 	bl	800331c <ts_itoa>
				}
				break;
 8003440:	e02f      	b.n	80034a2 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	1d1a      	adds	r2, r3, #4
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800344c:	e007      	b.n	800345e <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	60fa      	str	r2, [r7, #12]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	1c51      	adds	r1, r2, #1
 8003458:	61b9      	str	r1, [r7, #24]
 800345a:	7812      	ldrb	r2, [r2, #0]
 800345c:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f3      	bne.n	800344e <ts_formatstring+0xa2>
					}
				}
				break;
 8003466:	e01c      	b.n	80034a2 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1d1a      	adds	r2, r3, #4
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	220a      	movs	r2, #10
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ff50 	bl	800331c <ts_itoa>
				break;
 800347c:	e011      	b.n	80034a2 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	1d1a      	adds	r2, r3, #4
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	2210      	movs	r2, #16
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ff44 	bl	800331c <ts_itoa>
				break;
 8003494:	e005      	b.n	80034a2 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	60fa      	str	r2, [r7, #12]
 800349c:	2225      	movs	r2, #37	; 0x25
 800349e:	701a      	strb	r2, [r3, #0]
				  break;
 80034a0:	bf00      	nop
			}
			fmt++;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3301      	adds	r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	e007      	b.n	80034ba <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	60fa      	str	r2, [r7, #12]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	1c51      	adds	r1, r2, #1
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	7812      	ldrb	r2, [r2, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f47f af7d 	bne.w	80033be <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	461a      	mov	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	1ad3      	subs	r3, r2, r3
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80034da:	b40e      	push	{r1, r2, r3}
 80034dc:	b580      	push	{r7, lr}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80034e4:	f107 0320 	add.w	r3, r7, #32
 80034e8:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	69f9      	ldr	r1, [r7, #28]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ff5c 	bl	80033ac <ts_formatstring>
 80034f4:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003502:	b003      	add	sp, #12
 8003504:	4770      	bx	lr
	...

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	2500      	movs	r5, #0
 800350c:	4e0c      	ldr	r6, [pc, #48]	; (8003540 <__libc_init_array+0x38>)
 800350e:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 8003510:	1ba4      	subs	r4, r4, r6
 8003512:	10a4      	asrs	r4, r4, #2
 8003514:	42a5      	cmp	r5, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	f000 f82e 	bl	8003578 <_init>
 800351c:	2500      	movs	r5, #0
 800351e:	4e0a      	ldr	r6, [pc, #40]	; (8003548 <__libc_init_array+0x40>)
 8003520:	4c0a      	ldr	r4, [pc, #40]	; (800354c <__libc_init_array+0x44>)
 8003522:	1ba4      	subs	r4, r4, r6
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	42a5      	cmp	r5, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003530:	4798      	blx	r3
 8003532:	3501      	adds	r5, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800353a:	4798      	blx	r3
 800353c:	3501      	adds	r5, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	08005d60 	.word	0x08005d60
 8003544:	08005d60 	.word	0x08005d60
 8003548:	08005d60 	.word	0x08005d60
 800354c:	08005d64 	.word	0x08005d64

08003550 <memcpy>:
 8003550:	b510      	push	{r4, lr}
 8003552:	1e43      	subs	r3, r0, #1
 8003554:	440a      	add	r2, r1
 8003556:	4291      	cmp	r1, r2
 8003558:	d100      	bne.n	800355c <memcpy+0xc>
 800355a:	bd10      	pop	{r4, pc}
 800355c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003564:	e7f7      	b.n	8003556 <memcpy+0x6>

08003566 <memset>:
 8003566:	4603      	mov	r3, r0
 8003568:	4402      	add	r2, r0
 800356a:	4293      	cmp	r3, r2
 800356c:	d100      	bne.n	8003570 <memset+0xa>
 800356e:	4770      	bx	lr
 8003570:	f803 1b01 	strb.w	r1, [r3], #1
 8003574:	e7f9      	b.n	800356a <memset+0x4>
	...

08003578 <_init>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr

08003584 <_fini>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr
